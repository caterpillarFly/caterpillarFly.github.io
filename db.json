{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"45a3071c482a699c911bb5c9ec58c521e47c5bc6","modified":1523610189000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1514017712000},{"_id":"themes/next/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1514017712000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1514017712000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1514017712000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1514017712000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1514017712000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1514017712000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1514017712000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1514017712000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1514017712000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1514017712000},{"_id":"themes/next/_config.yml","hash":"f5cbe2154e750aab9626a3e7dd3cc17ee8bb0f85","modified":1514017712000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1514017712000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1514017712000},{"_id":"themes/next/package.json","hash":"6b5bfec48776ddf9c03811b1ff2cb2b615eccc88","modified":1514017712000},{"_id":"source/_posts/.DS_Store","hash":"fc6e829984697cfecb151012c841378e8fdb267a","modified":1523613828000},{"_id":"source/_posts/.Ulysses-Group.plist","hash":"67ba6fa7a51f2eb6f46529f787371efc22658999","modified":1523610204000},{"_id":"source/_posts/.Ulysses-favorites.plist","hash":"0d4089c9cecaad3e510a6a5034a69a4a03d77ace","modified":1523610204000},{"_id":"source/_posts/OC对象和非OC对象间的转换.md","hash":"8b74b5b2163e3f97b1c87ccd496b4e330db2005b","modified":1514017712000},{"_id":"source/_posts/ViewController那些事儿（一）.md","hash":"dd087796f8e58f8ac351afe78b6d7a0ab03b83a8","modified":1523614422000},{"_id":"source/_posts/ViewController那些事儿（三）.md","hash":"8daec06fd3ebdccfdf8033e1ebe7d75129c01b2b","modified":1523614993000},{"_id":"source/_posts/ViewController那些事儿（二）.md","hash":"5b4e6867ae9c369f03502794d2338058531f6fff","modified":1523613574000},{"_id":"source/_posts/iOS内存管理（一）.md","hash":"105205a86f5fc63cd2f79ef389bceaae2661dc71","modified":1514017712000},{"_id":"source/_posts/iOS内存管理（二）.md","hash":"2108bb4da27f03003b3181254eb051ea831abd91","modified":1514017712000},{"_id":"source/_posts/图片拉伸问题.md","hash":"88c3910f4d501e6ff4b606e804534bbde89cf79c","modified":1516675529000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1514017712000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1514017712000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1514017712000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1514017712000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1514017712000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1514017712000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1514017712000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1514017712000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1514017712000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1514017712000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1514017712000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1514017712000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1514017712000},{"_id":"themes/next/layout/_layout.swig","hash":"a44305f8fa7fe9c80eb50c0696a704424b589750","modified":1514017712000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1514017712000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1514017712000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1514017712000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1514017712000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1514017712000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1514017712000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1514017712000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1514017712000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1514017712000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1514017712000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1514017712000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1514017712000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514017712000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514017712000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1514017712000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1514017712000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1514017712000},{"_id":"themes/next/layout/_macro/post.swig","hash":"9481f43ed356e00df7b519e92ad0becebc9e1505","modified":1514017712000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1514017712000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a2b213c1a7c37cd6e4749f2018371f4c1f4f0d23","modified":1514017712000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1514017712000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1514017712000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1514017712000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1514017712000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1514017712000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1514017712000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1514017712000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1514017712000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1514017712000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1514017712000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1514017712000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1514017712000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1514017712000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1514017712000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1514017712000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1514017712000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1514017712000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1514017712000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1514017712000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1514017712000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1514017712000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1514017712000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1514017712000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1514017712000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1514017712000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1514017712000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1514017712000},{"_id":"themes/next/source/images/avatar.jpg","hash":"63c8387ee96510bcfa2a10fb1027a63515296077","modified":1514017712000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1514017712000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1514017712000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1514017712000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1514017712000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1514017712000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1514017712000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514017712000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1514017712000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1514017712000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1514017712000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1514017712000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1514017712000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514017712000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514017712000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514017712000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514017712000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514017712000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514017712000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1514017712000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1514017712000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1514017712000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1514017712000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1514017712000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1514017712000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1514017712000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1514017712000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1514017712000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1514017712000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1514017712000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1514017712000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1514017712000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1514017712000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1514017712000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1514017712000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1514017712000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1514017712000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1514017712000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1514017712000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1514017712000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1514017712000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1514017712000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1514017712000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1514017712000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1514017712000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1514017712000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1514017712000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1514017712000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1514017712000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1514017712000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1514017712000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1514017712000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1514017712000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1514017712000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1514017712000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1514017712000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1514017712000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1514017712000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1514017712000},{"_id":"themes/next/source/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1514017712000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1514017712000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1514017712000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1514017712000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1514017712000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1514017712000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1514017712000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1514017712000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1514017712000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1514017712000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1514017712000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1514017712000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1514017712000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1514017712000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1514017712000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1514017712000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1514017712000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1514017712000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1514017712000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1514017712000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1514017712000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1514017712000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1514017712000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1514017712000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1514017712000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1514017712000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1514017712000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1514017712000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1514017712000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1514017712000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1514017712000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1514017712000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1514017712000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1514017712000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1514017712000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1514017712000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1514017712000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1514017712000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1514017712000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1514017712000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1514017712000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1514017712000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1514017712000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1514017712000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1514017712000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514017712000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1514017712000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1514017712000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1514017712000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1514017712000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1514017712000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1514017712000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1514017712000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1514017712000},{"_id":"public/archives/2017/index.html","hash":"25b1844f616d983161e267ebf10967f30d600def","modified":1523615304746},{"_id":"public/archives/2017/06/index.html","hash":"9785303fe8586c1bf0977957bedcfca9c7109ec9","modified":1523615304747},{"_id":"public/archives/2017/08/index.html","hash":"c58dae0c0584ade5565ed78916b6a8beeac50bb5","modified":1523615304748},{"_id":"public/archives/2017/07/index.html","hash":"9488269296413cf3586e3a0891f39b67651923ff","modified":1523615304748},{"_id":"public/archives/2017/12/index.html","hash":"b10b1d06b94396abf536e608c23aec2ae1a97ff8","modified":1523615304748},{"_id":"public/2017/12/10/ViewController那些事儿（一）/index.html","hash":"7379bfe029e2a055ad125d5b08196d337dcb122e","modified":1523615304748},{"_id":"public/2017/08/01/图片拉伸问题/index.html","hash":"779fc03a440ecd49adf997f755643cf942968766","modified":1523615304748},{"_id":"public/2017/07/18/OC对象和非OC对象间的转换/index.html","hash":"266530beaf62dc3aaf0eb5397dd46644637541a5","modified":1523615304748},{"_id":"public/2017/07/08/iOS内存管理（二）/index.html","hash":"02ac7e9aca67fb5d29304c640710be8ff8867624","modified":1523615304748},{"_id":"public/2017/06/15/iOS内存管理（一）/index.html","hash":"1274a78cefca78473969e1a2771d9a5b5ae80498","modified":1523615304748},{"_id":"public/archives/index.html","hash":"26cd6aa69ddc8005698d65886587e43b1a285d11","modified":1523615304748},{"_id":"public/index.html","hash":"3271d987c6896b0a924915addb37b4fdefebf39e","modified":1523615304748},{"_id":"public/archives/2018/index.html","hash":"44c5f183760e1cd986a6e13d5a5e19b9e811ed3a","modified":1523615304753},{"_id":"public/archives/2018/04/index.html","hash":"a68b98a917b73e816edbb3295a0512f5ec39e7ed","modified":1523615304753},{"_id":"public/2018/04/13/ViewController那些事儿（三）/index.html","hash":"1d0709e7d49d2f777f9463e13170bda7b22b70ad","modified":1523615304753},{"_id":"public/2018/04/13/ViewController那些事儿（二）/index.html","hash":"79183dae6b793f1fc9e0ef820cc356aa6db2306b","modified":1523615304754},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1523615304763},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1523615304763},{"_id":"public/images/avatar.jpg","hash":"63c8387ee96510bcfa2a10fb1027a63515296077","modified":1523615304764},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1523615304764},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1523615304764},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1523615304764},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1523615304764},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1523615304764},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1523615304764},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523615304764},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1523615304764},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1523615304764},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1523615304764},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1523615304764},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1523615304764},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1523615304764},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1523615304764},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1523615304764},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1523615304764},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1523615304764},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1523615304764},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1523615304764},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1523615304764},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1523615304764},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1523615304764},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1523615304764},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1523615304764},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1523615304765},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1523615304765},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1523615305399},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1523615305411},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1523615305421},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1523615305421},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1523615305421},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1523615305421},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1523615305421},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1523615305421},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1523615305421},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1523615305421},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1523615305421},{"_id":"public/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1523615305421},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1523615305422},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1523615305422},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1523615305422},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1523615305422},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1523615305422},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1523615305422},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1523615305422},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1523615305422},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1523615305422},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1523615305422},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1523615305422},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1523615305422},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1523615305422},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1523615305422},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1523615305422},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1523615305423},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1523615305423},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1523615305423},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1523615305423},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1523615305423},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1523615305423},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1523615305423},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1523615305423},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1523615305423},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1523615305424},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1523615305424},{"_id":"public/css/main.css","hash":"52bacbe9b836ac1e33d364455533c4759bc5f5fa","modified":1523615305424},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1523615305424},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1523615305424},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1523615305424},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1523615305424},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1523615305424},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1523615305424},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1523615305424},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1523615305424},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1523615305424},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1523615305424},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1523615305424},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1523615305424},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1523615305424},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1523615305424},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1523615305424},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1523615305425},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1523615305425},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1523615305425},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1523615305425},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1523615305426},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1523615305426},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1523615305433}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"OC对象和Core Foundation对象间的转换","date":"2017-07-18T11:47:05.000Z","_content":"\n# 简介\n\nCore Foundation框架，是一组由C语言编写的接口，它所使用的对象，称之为Core Foundation对象，也是使用引用计数。CF对象与OC对象的区别很小，且可以混合使用。Foundation框架的API生成的对象，可以用Core Foundataion框架的API释放，反之亦然。\n\n# 内存管理\n\nCore Foundation框架提供了一下几个函数来进行内存管理，**CFBridgingRetain**，**CFBridgingRelease**。这两个函数分别和**\\_\\_bridge\\_retain**，**\\_\\_bridge\\_release**等价。另外，CF框架还提供了一个函数，来查看对象的引用计数，即：**CFGetRetainCount**。下面分别举例说明这几个函数的用法及内存管理情况：\n\n## \\_\\_bridge\n\n以下代码，将OC对象与void\\*指针进行相互转换。\n\n```objective-c\nvoid *p;\n{\n  id obj = [[NSObject alloc] init];\n  p = (__bridge void *)obj;         //id对象转换成void*指针\n  id op = (__bridge id)p;           //void*指针转换成id对象\n}\n//这行代码会崩溃，因为指针指向的对象已经释放，即指针是野指针了\nid obj = (__bridge id)p;\n```\n\n转换为void \\*的\\_\\_bridge转换，其安全性与赋值给\\_\\_unsafe\\_unretained修饰符相近，如果不注意赋值对象的所有者，就会因悬挂指针而导致程序崩溃。\n\n## \\_\\_bridge\\_retained\n\n\\_\\_bridge\\_retained主要是将OC对象转换为CF对象。它和CFBridgingRetain等价，\\_\\_bridge\\_retained转换，可使要转换赋值的变量也持有所赋值的对象。下面通过代码说明对象内存的管理情况：\n\n```objective-c\nCFMutableArrayRef cfObject = NULL;\n{\n    id obj = [[NSMutableArray alloc] init];\n    //cfobject也持有对象，引用+1\n    cfobject = CFBridgingRetain(obj);       \n    //该代码和下行转换代码等价\n    //cfobject = (__bridge_retained CFTypeRef)obj;\n    printf(\"retain count = %ld\\n\", CFGetRetainCount(cfobj));\n}\nprintf(\"retain count after the scope = %ld\\n\", CFGetRetainCount(cfobj));\nCFRelease(cfobject);\n```\n\n代码运行结果如下：\n\n```\nretain count = 2\nretain count after the scope = 1\n```\n\n可以看出，通过\\_\\_bridge\\_retained转换，对象的引用计数加1了，而且，如果不调用CFRelease进行释放的话，会造成内存泄露。可以看出，Foundation框架的API生成的OC对象，可以作为Core Foundation对象来使用，也可以通过CFRelease来释放。\n\n那如果使用\\_\\_bridge代替\\_\\_bridge\\_retained，会是什么情况呢？\n\n```objective-c\nCFMutableArrayRef cfObject = NULL;\n{\n    id obj = [[NSMutableArray alloc] init];\n    //cfobject并不持有对象\n    cfobject = (__bridge CFTypeRef)obj;\n    printf(\"retain count = %ld\\n\", CFGetRetainCount(cfobj));\n}\nprintf(\"retain count after the scope = %ld\\n\", CFGetRetainCount(cfobj));\nCFRelease(cfobject);\n```\n\n结果输出：retain count = 1，并在第二个打印语句那崩溃。为什么呢？因为前面说过，\\_\\_bridge转换并不会改变对象的持有状况，所以引用计数还是1。且超出作用域之后，cfobject就变为野指针。访问野指针造成程序崩溃。\n\n## \\_\\_bridge\\_transfer\n\n与\\_\\_bridge\\_retained相反，\\_\\_bridge\\_transfer将CF对象转换成OC对象。并且，被转换的变量，它所持有的对象，在它被赋值给转换目标后随之释放。看以下代码：\n\n```objective-c\n{\n    CFMutableArrayRef cfobj = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);\n    printf(\"retain count = %ld\\n\", CFGetRetainCount(cfobj));\n    id obj = CFBridgingRelease(cfobj);\n    //这个转换和以下转换等价：\n    //id obj = (__bridge_transfer id)cfobj;\n    //注意，虽然cfobj不再持有对象的引用，但是指针还是有效的，还是其正常作用域范围\n    printf(\"retain count after the cast = %ld\\n\", CFGetRetainCount(cfobj));    \n}\n```\n\n输出结果如下：\n\n```\nretain count = 1\nretain count after the cast = 1\n```\n\n经过\\_\\_bridge\\_transfer转换，对象的引用计数没有改变，且CF框架创建的对象cfobj，并没有调用CFRelease进行释放，这是因为经过\\_\\_bridge\\_transfer转换后，cfobj不再持有对象的引用，故而不需要进行释放。但obj持有对象引用，它的释放是有ARC自动进行的。\n\n同样，如果用\\_\\_bridge来代替\\_\\_bridge\\_transfer，将会是什么情况呢？\n\n```objective-c\n{\n    CFMutableArrayRef cfobj = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);\n    printf(\"retain count = %ld\\n\", CFGetRetainCount(cfobj));\n    id obj = (__bridge id)cfobj;\n    printf(\"retain count after the cast = %ld\\n\", CFGetRetainCount(cfobj));    \n}\n```\n\n输出结果如下：\n\n```objective-c\nretain count = 1\nretain count after the cast = 2\n```\n\n为什么引用计数加1了？因为id obj = (\\_\\_bridge id)cfobj;其实和 id \\_\\_strong obj = (\\_\\_bridge id)cfobj等价。所以obj会持有对象的强引用，从而引用计数加1。到{}结束时，OC对象obj超出作用域，其强引用失效，对象引用计数减一。但是，cfobj对象还持有引用，它也没有调用CFRelease进行释放，对象的引用计数还为1，从而造成内存泄露。\n\n所以，在将CF对象通过\\_\\_bridge转换成OC对象时，一定要注意对象的释放问题。","source":"_posts/OC对象和非OC对象间的转换.md","raw":"---\ntitle: OC对象和Core Foundation对象间的转换\ndate: 2017-07-18 19:47:05\ntags:\n---\n\n# 简介\n\nCore Foundation框架，是一组由C语言编写的接口，它所使用的对象，称之为Core Foundation对象，也是使用引用计数。CF对象与OC对象的区别很小，且可以混合使用。Foundation框架的API生成的对象，可以用Core Foundataion框架的API释放，反之亦然。\n\n# 内存管理\n\nCore Foundation框架提供了一下几个函数来进行内存管理，**CFBridgingRetain**，**CFBridgingRelease**。这两个函数分别和**\\_\\_bridge\\_retain**，**\\_\\_bridge\\_release**等价。另外，CF框架还提供了一个函数，来查看对象的引用计数，即：**CFGetRetainCount**。下面分别举例说明这几个函数的用法及内存管理情况：\n\n## \\_\\_bridge\n\n以下代码，将OC对象与void\\*指针进行相互转换。\n\n```objective-c\nvoid *p;\n{\n  id obj = [[NSObject alloc] init];\n  p = (__bridge void *)obj;         //id对象转换成void*指针\n  id op = (__bridge id)p;           //void*指针转换成id对象\n}\n//这行代码会崩溃，因为指针指向的对象已经释放，即指针是野指针了\nid obj = (__bridge id)p;\n```\n\n转换为void \\*的\\_\\_bridge转换，其安全性与赋值给\\_\\_unsafe\\_unretained修饰符相近，如果不注意赋值对象的所有者，就会因悬挂指针而导致程序崩溃。\n\n## \\_\\_bridge\\_retained\n\n\\_\\_bridge\\_retained主要是将OC对象转换为CF对象。它和CFBridgingRetain等价，\\_\\_bridge\\_retained转换，可使要转换赋值的变量也持有所赋值的对象。下面通过代码说明对象内存的管理情况：\n\n```objective-c\nCFMutableArrayRef cfObject = NULL;\n{\n    id obj = [[NSMutableArray alloc] init];\n    //cfobject也持有对象，引用+1\n    cfobject = CFBridgingRetain(obj);       \n    //该代码和下行转换代码等价\n    //cfobject = (__bridge_retained CFTypeRef)obj;\n    printf(\"retain count = %ld\\n\", CFGetRetainCount(cfobj));\n}\nprintf(\"retain count after the scope = %ld\\n\", CFGetRetainCount(cfobj));\nCFRelease(cfobject);\n```\n\n代码运行结果如下：\n\n```\nretain count = 2\nretain count after the scope = 1\n```\n\n可以看出，通过\\_\\_bridge\\_retained转换，对象的引用计数加1了，而且，如果不调用CFRelease进行释放的话，会造成内存泄露。可以看出，Foundation框架的API生成的OC对象，可以作为Core Foundation对象来使用，也可以通过CFRelease来释放。\n\n那如果使用\\_\\_bridge代替\\_\\_bridge\\_retained，会是什么情况呢？\n\n```objective-c\nCFMutableArrayRef cfObject = NULL;\n{\n    id obj = [[NSMutableArray alloc] init];\n    //cfobject并不持有对象\n    cfobject = (__bridge CFTypeRef)obj;\n    printf(\"retain count = %ld\\n\", CFGetRetainCount(cfobj));\n}\nprintf(\"retain count after the scope = %ld\\n\", CFGetRetainCount(cfobj));\nCFRelease(cfobject);\n```\n\n结果输出：retain count = 1，并在第二个打印语句那崩溃。为什么呢？因为前面说过，\\_\\_bridge转换并不会改变对象的持有状况，所以引用计数还是1。且超出作用域之后，cfobject就变为野指针。访问野指针造成程序崩溃。\n\n## \\_\\_bridge\\_transfer\n\n与\\_\\_bridge\\_retained相反，\\_\\_bridge\\_transfer将CF对象转换成OC对象。并且，被转换的变量，它所持有的对象，在它被赋值给转换目标后随之释放。看以下代码：\n\n```objective-c\n{\n    CFMutableArrayRef cfobj = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);\n    printf(\"retain count = %ld\\n\", CFGetRetainCount(cfobj));\n    id obj = CFBridgingRelease(cfobj);\n    //这个转换和以下转换等价：\n    //id obj = (__bridge_transfer id)cfobj;\n    //注意，虽然cfobj不再持有对象的引用，但是指针还是有效的，还是其正常作用域范围\n    printf(\"retain count after the cast = %ld\\n\", CFGetRetainCount(cfobj));    \n}\n```\n\n输出结果如下：\n\n```\nretain count = 1\nretain count after the cast = 1\n```\n\n经过\\_\\_bridge\\_transfer转换，对象的引用计数没有改变，且CF框架创建的对象cfobj，并没有调用CFRelease进行释放，这是因为经过\\_\\_bridge\\_transfer转换后，cfobj不再持有对象的引用，故而不需要进行释放。但obj持有对象引用，它的释放是有ARC自动进行的。\n\n同样，如果用\\_\\_bridge来代替\\_\\_bridge\\_transfer，将会是什么情况呢？\n\n```objective-c\n{\n    CFMutableArrayRef cfobj = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);\n    printf(\"retain count = %ld\\n\", CFGetRetainCount(cfobj));\n    id obj = (__bridge id)cfobj;\n    printf(\"retain count after the cast = %ld\\n\", CFGetRetainCount(cfobj));    \n}\n```\n\n输出结果如下：\n\n```objective-c\nretain count = 1\nretain count after the cast = 2\n```\n\n为什么引用计数加1了？因为id obj = (\\_\\_bridge id)cfobj;其实和 id \\_\\_strong obj = (\\_\\_bridge id)cfobj等价。所以obj会持有对象的强引用，从而引用计数加1。到{}结束时，OC对象obj超出作用域，其强引用失效，对象引用计数减一。但是，cfobj对象还持有引用，它也没有调用CFRelease进行释放，对象的引用计数还为1，从而造成内存泄露。\n\n所以，在将CF对象通过\\_\\_bridge转换成OC对象时，一定要注意对象的释放问题。","slug":"OC对象和非OC对象间的转换","published":1,"updated":"2017-12-23T08:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxt7o5a0000px91qaa3hvqe","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Core Foundation框架，是一组由C语言编写的接口，它所使用的对象，称之为Core Foundation对象，也是使用引用计数。CF对象与OC对象的区别很小，且可以混合使用。Foundation框架的API生成的对象，可以用Core Foundataion框架的API释放，反之亦然。</p>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p>Core Foundation框架提供了一下几个函数来进行内存管理，<strong>CFBridgingRetain</strong>，<strong>CFBridgingRelease</strong>。这两个函数分别和<strong>__bridge_retain</strong>，<strong>__bridge_release</strong>等价。另外，CF框架还提供了一个函数，来查看对象的引用计数，即：<strong>CFGetRetainCount</strong>。下面分别举例说明这几个函数的用法及内存管理情况：</p>\n<h2 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"__bridge\"></a>__bridge</h2><p>以下代码，将OC对象与void*指针进行相互转换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">void *p;</div><div class=\"line\">&#123;</div><div class=\"line\">  id obj = [[NSObject alloc] init];</div><div class=\"line\">  p = (__bridge void *)obj;         //id对象转换成void*指针</div><div class=\"line\">  id op = (__bridge id)p;           //void*指针转换成id对象</div><div class=\"line\">&#125;</div><div class=\"line\">//这行代码会崩溃，因为指针指向的对象已经释放，即指针是野指针了</div><div class=\"line\">id obj = (__bridge id)p;</div></pre></td></tr></table></figure>\n<p>转换为void *的__bridge转换，其安全性与赋值给__unsafe_unretained修饰符相近，如果不注意赋值对象的所有者，就会因悬挂指针而导致程序崩溃。</p>\n<h2 id=\"bridge-retained\"><a href=\"#bridge-retained\" class=\"headerlink\" title=\"__bridge_retained\"></a>__bridge_retained</h2><p>__bridge_retained主要是将OC对象转换为CF对象。它和CFBridgingRetain等价，__bridge_retained转换，可使要转换赋值的变量也持有所赋值的对象。下面通过代码说明对象内存的管理情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">CFMutableArrayRef cfObject = NULL;</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj = [[NSMutableArray alloc] init];</div><div class=\"line\">    //cfobject也持有对象，引用+1</div><div class=\"line\">    cfobject = CFBridgingRetain(obj);       </div><div class=\"line\">    //该代码和下行转换代码等价</div><div class=\"line\">    //cfobject = (__bridge_retained CFTypeRef)obj;</div><div class=\"line\">    printf(&quot;retain count = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">&#125;</div><div class=\"line\">printf(&quot;retain count after the scope = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">CFRelease(cfobject);</div></pre></td></tr></table></figure>\n<p>代码运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">retain count = 2</div><div class=\"line\">retain count after the scope = 1</div></pre></td></tr></table></figure>\n<p>可以看出，通过__bridge_retained转换，对象的引用计数加1了，而且，如果不调用CFRelease进行释放的话，会造成内存泄露。可以看出，Foundation框架的API生成的OC对象，可以作为Core Foundation对象来使用，也可以通过CFRelease来释放。</p>\n<p>那如果使用__bridge代替__bridge_retained，会是什么情况呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">CFMutableArrayRef cfObject = NULL;</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj = [[NSMutableArray alloc] init];</div><div class=\"line\">    //cfobject并不持有对象</div><div class=\"line\">    cfobject = (__bridge CFTypeRef)obj;</div><div class=\"line\">    printf(&quot;retain count = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">&#125;</div><div class=\"line\">printf(&quot;retain count after the scope = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">CFRelease(cfobject);</div></pre></td></tr></table></figure>\n<p>结果输出：retain count = 1，并在第二个打印语句那崩溃。为什么呢？因为前面说过，__bridge转换并不会改变对象的持有状况，所以引用计数还是1。且超出作用域之后，cfobject就变为野指针。访问野指针造成程序崩溃。</p>\n<h2 id=\"bridge-transfer\"><a href=\"#bridge-transfer\" class=\"headerlink\" title=\"__bridge_transfer\"></a>__bridge_transfer</h2><p>与__bridge_retained相反，__bridge_transfer将CF对象转换成OC对象。并且，被转换的变量，它所持有的对象，在它被赋值给转换目标后随之释放。看以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    CFMutableArrayRef cfobj = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);</div><div class=\"line\">    printf(&quot;retain count = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">    id obj = CFBridgingRelease(cfobj);</div><div class=\"line\">    //这个转换和以下转换等价：</div><div class=\"line\">    //id obj = (__bridge_transfer id)cfobj;</div><div class=\"line\">    //注意，虽然cfobj不再持有对象的引用，但是指针还是有效的，还是其正常作用域范围</div><div class=\"line\">    printf(&quot;retain count after the cast = %ld\\n&quot;, CFGetRetainCount(cfobj));    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">retain count = 1</div><div class=\"line\">retain count after the cast = 1</div></pre></td></tr></table></figure>\n<p>经过__bridge_transfer转换，对象的引用计数没有改变，且CF框架创建的对象cfobj，并没有调用CFRelease进行释放，这是因为经过__bridge_transfer转换后，cfobj不再持有对象的引用，故而不需要进行释放。但obj持有对象引用，它的释放是有ARC自动进行的。</p>\n<p>同样，如果用__bridge来代替__bridge_transfer，将会是什么情况呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    CFMutableArrayRef cfobj = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);</div><div class=\"line\">    printf(&quot;retain count = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">    id obj = (__bridge id)cfobj;</div><div class=\"line\">    printf(&quot;retain count after the cast = %ld\\n&quot;, CFGetRetainCount(cfobj));    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">retain count = 1</div><div class=\"line\">retain count after the cast = 2</div></pre></td></tr></table></figure>\n<p>为什么引用计数加1了？因为id obj = (__bridge id)cfobj;其实和 id __strong obj = (__bridge id)cfobj等价。所以obj会持有对象的强引用，从而引用计数加1。到{}结束时，OC对象obj超出作用域，其强引用失效，对象引用计数减一。但是，cfobj对象还持有引用，它也没有调用CFRelease进行释放，对象的引用计数还为1，从而造成内存泄露。</p>\n<p>所以，在将CF对象通过__bridge转换成OC对象时，一定要注意对象的释放问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Core Foundation框架，是一组由C语言编写的接口，它所使用的对象，称之为Core Foundation对象，也是使用引用计数。CF对象与OC对象的区别很小，且可以混合使用。Foundation框架的API生成的对象，可以用Core Foundataion框架的API释放，反之亦然。</p>\n<h1 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h1><p>Core Foundation框架提供了一下几个函数来进行内存管理，<strong>CFBridgingRetain</strong>，<strong>CFBridgingRelease</strong>。这两个函数分别和<strong>__bridge_retain</strong>，<strong>__bridge_release</strong>等价。另外，CF框架还提供了一个函数，来查看对象的引用计数，即：<strong>CFGetRetainCount</strong>。下面分别举例说明这几个函数的用法及内存管理情况：</p>\n<h2 id=\"bridge\"><a href=\"#bridge\" class=\"headerlink\" title=\"__bridge\"></a>__bridge</h2><p>以下代码，将OC对象与void*指针进行相互转换。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">void *p;</div><div class=\"line\">&#123;</div><div class=\"line\">  id obj = [[NSObject alloc] init];</div><div class=\"line\">  p = (__bridge void *)obj;         //id对象转换成void*指针</div><div class=\"line\">  id op = (__bridge id)p;           //void*指针转换成id对象</div><div class=\"line\">&#125;</div><div class=\"line\">//这行代码会崩溃，因为指针指向的对象已经释放，即指针是野指针了</div><div class=\"line\">id obj = (__bridge id)p;</div></pre></td></tr></table></figure>\n<p>转换为void *的__bridge转换，其安全性与赋值给__unsafe_unretained修饰符相近，如果不注意赋值对象的所有者，就会因悬挂指针而导致程序崩溃。</p>\n<h2 id=\"bridge-retained\"><a href=\"#bridge-retained\" class=\"headerlink\" title=\"__bridge_retained\"></a>__bridge_retained</h2><p>__bridge_retained主要是将OC对象转换为CF对象。它和CFBridgingRetain等价，__bridge_retained转换，可使要转换赋值的变量也持有所赋值的对象。下面通过代码说明对象内存的管理情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">CFMutableArrayRef cfObject = NULL;</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj = [[NSMutableArray alloc] init];</div><div class=\"line\">    //cfobject也持有对象，引用+1</div><div class=\"line\">    cfobject = CFBridgingRetain(obj);       </div><div class=\"line\">    //该代码和下行转换代码等价</div><div class=\"line\">    //cfobject = (__bridge_retained CFTypeRef)obj;</div><div class=\"line\">    printf(&quot;retain count = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">&#125;</div><div class=\"line\">printf(&quot;retain count after the scope = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">CFRelease(cfobject);</div></pre></td></tr></table></figure>\n<p>代码运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">retain count = 2</div><div class=\"line\">retain count after the scope = 1</div></pre></td></tr></table></figure>\n<p>可以看出，通过__bridge_retained转换，对象的引用计数加1了，而且，如果不调用CFRelease进行释放的话，会造成内存泄露。可以看出，Foundation框架的API生成的OC对象，可以作为Core Foundation对象来使用，也可以通过CFRelease来释放。</p>\n<p>那如果使用__bridge代替__bridge_retained，会是什么情况呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">CFMutableArrayRef cfObject = NULL;</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj = [[NSMutableArray alloc] init];</div><div class=\"line\">    //cfobject并不持有对象</div><div class=\"line\">    cfobject = (__bridge CFTypeRef)obj;</div><div class=\"line\">    printf(&quot;retain count = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">&#125;</div><div class=\"line\">printf(&quot;retain count after the scope = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">CFRelease(cfobject);</div></pre></td></tr></table></figure>\n<p>结果输出：retain count = 1，并在第二个打印语句那崩溃。为什么呢？因为前面说过，__bridge转换并不会改变对象的持有状况，所以引用计数还是1。且超出作用域之后，cfobject就变为野指针。访问野指针造成程序崩溃。</p>\n<h2 id=\"bridge-transfer\"><a href=\"#bridge-transfer\" class=\"headerlink\" title=\"__bridge_transfer\"></a>__bridge_transfer</h2><p>与__bridge_retained相反，__bridge_transfer将CF对象转换成OC对象。并且，被转换的变量，它所持有的对象，在它被赋值给转换目标后随之释放。看以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    CFMutableArrayRef cfobj = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);</div><div class=\"line\">    printf(&quot;retain count = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">    id obj = CFBridgingRelease(cfobj);</div><div class=\"line\">    //这个转换和以下转换等价：</div><div class=\"line\">    //id obj = (__bridge_transfer id)cfobj;</div><div class=\"line\">    //注意，虽然cfobj不再持有对象的引用，但是指针还是有效的，还是其正常作用域范围</div><div class=\"line\">    printf(&quot;retain count after the cast = %ld\\n&quot;, CFGetRetainCount(cfobj));    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">retain count = 1</div><div class=\"line\">retain count after the cast = 1</div></pre></td></tr></table></figure>\n<p>经过__bridge_transfer转换，对象的引用计数没有改变，且CF框架创建的对象cfobj，并没有调用CFRelease进行释放，这是因为经过__bridge_transfer转换后，cfobj不再持有对象的引用，故而不需要进行释放。但obj持有对象引用，它的释放是有ARC自动进行的。</p>\n<p>同样，如果用__bridge来代替__bridge_transfer，将会是什么情况呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    CFMutableArrayRef cfobj = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);</div><div class=\"line\">    printf(&quot;retain count = %ld\\n&quot;, CFGetRetainCount(cfobj));</div><div class=\"line\">    id obj = (__bridge id)cfobj;</div><div class=\"line\">    printf(&quot;retain count after the cast = %ld\\n&quot;, CFGetRetainCount(cfobj));    </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>输出结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">retain count = 1</div><div class=\"line\">retain count after the cast = 2</div></pre></td></tr></table></figure>\n<p>为什么引用计数加1了？因为id obj = (__bridge id)cfobj;其实和 id __strong obj = (__bridge id)cfobj等价。所以obj会持有对象的强引用，从而引用计数加1。到{}结束时，OC对象obj超出作用域，其强引用失效，对象引用计数减一。但是，cfobj对象还持有引用，它也没有调用CFRelease进行释放，对象的引用计数还为1，从而造成内存泄露。</p>\n<p>所以，在将CF对象通过__bridge转换成OC对象时，一定要注意对象的释放问题。</p>\n"},{"title":"ViewController那些事儿（一）","date":"2017-12-10T02:20:56.000Z","_content":"# 简介\nUIViewController是iOS开发中最常用的对象，负责管理视图层次，即视图容器\nVC对象有一个属性：view，即我们所见的界面。\n\n故VC只是一个容器，它并不展示任何内容，展示内容都是View负责的。\n\n那这个view是何时初始化的呢？VC初始化之后，view是啥状态呢？viewDidLoad是何时调用的？为啥从xib中拖出来的变量，都是weak的？这篇文章将会回答以上问题。\n\n# VC指定初始化方法\n在Xcode里，指定初始化方法后会跟上**NS\\_DESIGNATED\\_INITIALIZER**标识符。那VC的指定初始化方法有哪些？\n```objective-c\n- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil;\n- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;\n```\n这两个初始化方法有啥区别？\n\n通常情况下，VC可以通过以下两种方式初始化：\n\n1. init\n```objective-c\nTestVC *vc = [[TestVC alloc] init];\nXibTestVC *vc = [[XibTestVC alloc] initWithNibName:@\"XibTestVC\" bundle:nil];\n```\n当通过代码手动创建VC时，就会调用调用**initWithNibName:bundle:**这个方法。\n\n2. nib文件\n\n```objective-c\nTestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@\"TestXibViewController\" owner:nil options:nil] firstObject];\nUIStoryboard *storybaord = [UIStoryboard storyboardWithName:@\"StoryboardVC\" bundle:nil];\nStoryboardVC *vc = [storybaord instantiateInitialViewController];\n```\n\n**initWithCoder:**方法，则是所有固化（archived）对象的初始化器。当需要从nib文件中加载对象时，就会调用该方法。当这个方法调用时，nib中的固化对象都会被解固，但是此时还并未和**outlets/actions**关联。\n\n那是何时进行关联的呢？\n\n这就要提到两个方法：**instantiateWithOwner:options:** 和**awakeFromNib**。\n\n**instantiateWithOwner:options**是UINib的类方法，它会将解固的对象和outlets/actions等进行关联。\n\n当nib文件中所有对象完成解固，并且和outlets/actions完成关联，系统就会调用awakeFromNib方法。\n\n所以通过nib文件初始化VC的整个流程大致就是：\n\n**NSBundle loadNibNamed:owner:options** -\\> **UIClassSwapper initWithCoder:** -\\> **VC initWithCoder** -\\> **UINib instantiateWithOwner:options:** -\\> **VC awakeFromNib**。\n\n从UIStoryboard初始化的VC，关联过程和这不太一样，具体关联过程下章讲到View状态时再解释。\n\n另外，上面的两段初始化代码，可以看出，我们创建了两个xib文件，XibTestVC.xib和TestXibViewController.xib。同样是xib文件，为啥最后采用完全不同的初始化方法呢？\n\n<img src=\"https://github.com/caterpillarFly/blogImages/blob/master/XibTestVC.xib.png?raw=true\" width=\"60%\" height=\"60%\"/>\n\n<img src=\"https://github.com/caterpillarFly/blogImages/blob/master/TestXibViewController.xib.png?raw=true\" width=\"60%\" height=\"60%\"/>\n\n通过图片对比可以发现，上图只有View视图在xib中，而下图，整个VC（包括它的视图）都在xib中。\n\n当初始化XibTestVC时，并不需要初始化它的视图，所以只是传入了一个Xib文件名，这是后续初始化View需要的\n\n```objective-c\nXibTestVC *vc = [[XibTestVC alloc] initWithNibName:@\"XibTestVC\" bundle:nil];\n```\n\n但是TestXibViewController初始化时，因为它的VC和视图都在Xib文件中，所以只能通过Xib文件来初始化VC和视图。\n\n```objective-c\nTestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@\"TestXibViewController\" owner:nil options:nil] firstObject];\n```\n\n[1]:\thttp://www.cnblogs.com/Mike-zh/p/4430616.html\n\n[image-1]:\thttps://github.com/caterpillarFly/blogImages/blob/master/MGAlertViewControllerCrash.png?raw=true","source":"_posts/ViewController那些事儿（一）.md","raw":"---\ntitle: ViewController那些事儿（一）\ndate: 2017-12-10 10:20:56\ntags:\n---\n# 简介\nUIViewController是iOS开发中最常用的对象，负责管理视图层次，即视图容器\nVC对象有一个属性：view，即我们所见的界面。\n\n故VC只是一个容器，它并不展示任何内容，展示内容都是View负责的。\n\n那这个view是何时初始化的呢？VC初始化之后，view是啥状态呢？viewDidLoad是何时调用的？为啥从xib中拖出来的变量，都是weak的？这篇文章将会回答以上问题。\n\n# VC指定初始化方法\n在Xcode里，指定初始化方法后会跟上**NS\\_DESIGNATED\\_INITIALIZER**标识符。那VC的指定初始化方法有哪些？\n```objective-c\n- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil;\n- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;\n```\n这两个初始化方法有啥区别？\n\n通常情况下，VC可以通过以下两种方式初始化：\n\n1. init\n```objective-c\nTestVC *vc = [[TestVC alloc] init];\nXibTestVC *vc = [[XibTestVC alloc] initWithNibName:@\"XibTestVC\" bundle:nil];\n```\n当通过代码手动创建VC时，就会调用调用**initWithNibName:bundle:**这个方法。\n\n2. nib文件\n\n```objective-c\nTestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@\"TestXibViewController\" owner:nil options:nil] firstObject];\nUIStoryboard *storybaord = [UIStoryboard storyboardWithName:@\"StoryboardVC\" bundle:nil];\nStoryboardVC *vc = [storybaord instantiateInitialViewController];\n```\n\n**initWithCoder:**方法，则是所有固化（archived）对象的初始化器。当需要从nib文件中加载对象时，就会调用该方法。当这个方法调用时，nib中的固化对象都会被解固，但是此时还并未和**outlets/actions**关联。\n\n那是何时进行关联的呢？\n\n这就要提到两个方法：**instantiateWithOwner:options:** 和**awakeFromNib**。\n\n**instantiateWithOwner:options**是UINib的类方法，它会将解固的对象和outlets/actions等进行关联。\n\n当nib文件中所有对象完成解固，并且和outlets/actions完成关联，系统就会调用awakeFromNib方法。\n\n所以通过nib文件初始化VC的整个流程大致就是：\n\n**NSBundle loadNibNamed:owner:options** -\\> **UIClassSwapper initWithCoder:** -\\> **VC initWithCoder** -\\> **UINib instantiateWithOwner:options:** -\\> **VC awakeFromNib**。\n\n从UIStoryboard初始化的VC，关联过程和这不太一样，具体关联过程下章讲到View状态时再解释。\n\n另外，上面的两段初始化代码，可以看出，我们创建了两个xib文件，XibTestVC.xib和TestXibViewController.xib。同样是xib文件，为啥最后采用完全不同的初始化方法呢？\n\n<img src=\"https://github.com/caterpillarFly/blogImages/blob/master/XibTestVC.xib.png?raw=true\" width=\"60%\" height=\"60%\"/>\n\n<img src=\"https://github.com/caterpillarFly/blogImages/blob/master/TestXibViewController.xib.png?raw=true\" width=\"60%\" height=\"60%\"/>\n\n通过图片对比可以发现，上图只有View视图在xib中，而下图，整个VC（包括它的视图）都在xib中。\n\n当初始化XibTestVC时，并不需要初始化它的视图，所以只是传入了一个Xib文件名，这是后续初始化View需要的\n\n```objective-c\nXibTestVC *vc = [[XibTestVC alloc] initWithNibName:@\"XibTestVC\" bundle:nil];\n```\n\n但是TestXibViewController初始化时，因为它的VC和视图都在Xib文件中，所以只能通过Xib文件来初始化VC和视图。\n\n```objective-c\nTestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@\"TestXibViewController\" owner:nil options:nil] firstObject];\n```\n\n[1]:\thttp://www.cnblogs.com/Mike-zh/p/4430616.html\n\n[image-1]:\thttps://github.com/caterpillarFly/blogImages/blob/master/MGAlertViewControllerCrash.png?raw=true","slug":"ViewController那些事儿（一）","published":1,"updated":"2018-04-13T10:13:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxt7o5f0001px91s79q8oic","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>UIViewController是iOS开发中最常用的对象，负责管理视图层次，即视图容器<br>VC对象有一个属性：view，即我们所见的界面。</p>\n<p>故VC只是一个容器，它并不展示任何内容，展示内容都是View负责的。</p>\n<p>那这个view是何时初始化的呢？VC初始化之后，view是啥状态呢？viewDidLoad是何时调用的？为啥从xib中拖出来的变量，都是weak的？这篇文章将会回答以上问题。</p>\n<h1 id=\"VC指定初始化方法\"><a href=\"#VC指定初始化方法\" class=\"headerlink\" title=\"VC指定初始化方法\"></a>VC指定初始化方法</h1><p>在Xcode里，指定初始化方法后会跟上<strong>NS_DESIGNATED_INITIALIZER</strong>标识符。那VC的指定初始化方法有哪些？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil;</div><div class=\"line\">- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;</div></pre></td></tr></table></figure></p>\n<p>这两个初始化方法有啥区别？</p>\n<p>通常情况下，VC可以通过以下两种方式初始化：</p>\n<ol>\n<li>init<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">TestVC *vc = [[TestVC alloc] init];</div><div class=\"line\">XibTestVC *vc = [[XibTestVC alloc] initWithNibName:@&quot;XibTestVC&quot; bundle:nil];</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当通过代码手动创建VC时，就会调用调用<strong>initWithNibName:bundle:</strong>这个方法。</p>\n<ol>\n<li>nib文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@&quot;TestXibViewController&quot; owner:nil options:nil] firstObject];</div><div class=\"line\">UIStoryboard *storybaord = [UIStoryboard storyboardWithName:@&quot;StoryboardVC&quot; bundle:nil];</div><div class=\"line\">StoryboardVC *vc = [storybaord instantiateInitialViewController];</div></pre></td></tr></table></figure>\n<p><strong>initWithCoder:</strong>方法，则是所有固化（archived）对象的初始化器。当需要从nib文件中加载对象时，就会调用该方法。当这个方法调用时，nib中的固化对象都会被解固，但是此时还并未和<strong>outlets/actions</strong>关联。</p>\n<p>那是何时进行关联的呢？</p>\n<p>这就要提到两个方法：<strong>instantiateWithOwner:options:</strong> 和<strong>awakeFromNib</strong>。</p>\n<p><strong>instantiateWithOwner:options</strong>是UINib的类方法，它会将解固的对象和outlets/actions等进行关联。</p>\n<p>当nib文件中所有对象完成解固，并且和outlets/actions完成关联，系统就会调用awakeFromNib方法。</p>\n<p>所以通过nib文件初始化VC的整个流程大致就是：</p>\n<p><strong>NSBundle loadNibNamed:owner:options</strong> -> <strong>UIClassSwapper initWithCoder:</strong> -> <strong>VC initWithCoder</strong> -> <strong>UINib instantiateWithOwner:options:</strong> -> <strong>VC awakeFromNib</strong>。</p>\n<p>从UIStoryboard初始化的VC，关联过程和这不太一样，具体关联过程下章讲到View状态时再解释。</p>\n<p>另外，上面的两段初始化代码，可以看出，我们创建了两个xib文件，XibTestVC.xib和TestXibViewController.xib。同样是xib文件，为啥最后采用完全不同的初始化方法呢？</p>\n<p><img src=\"https://github.com/caterpillarFly/blogImages/blob/master/XibTestVC.xib.png?raw=true\" width=\"60%\" height=\"60%\"></p>\n<p><img src=\"https://github.com/caterpillarFly/blogImages/blob/master/TestXibViewController.xib.png?raw=true\" width=\"60%\" height=\"60%\"></p>\n<p>通过图片对比可以发现，上图只有View视图在xib中，而下图，整个VC（包括它的视图）都在xib中。</p>\n<p>当初始化XibTestVC时，并不需要初始化它的视图，所以只是传入了一个Xib文件名，这是后续初始化View需要的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">XibTestVC *vc = [[XibTestVC alloc] initWithNibName:@&quot;XibTestVC&quot; bundle:nil];</div></pre></td></tr></table></figure>\n<p>但是TestXibViewController初始化时，因为它的VC和视图都在Xib文件中，所以只能通过Xib文件来初始化VC和视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@&quot;TestXibViewController&quot; owner:nil options:nil] firstObject];</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>UIViewController是iOS开发中最常用的对象，负责管理视图层次，即视图容器<br>VC对象有一个属性：view，即我们所见的界面。</p>\n<p>故VC只是一个容器，它并不展示任何内容，展示内容都是View负责的。</p>\n<p>那这个view是何时初始化的呢？VC初始化之后，view是啥状态呢？viewDidLoad是何时调用的？为啥从xib中拖出来的变量，都是weak的？这篇文章将会回答以上问题。</p>\n<h1 id=\"VC指定初始化方法\"><a href=\"#VC指定初始化方法\" class=\"headerlink\" title=\"VC指定初始化方法\"></a>VC指定初始化方法</h1><p>在Xcode里，指定初始化方法后会跟上<strong>NS_DESIGNATED_INITIALIZER</strong>标识符。那VC的指定初始化方法有哪些？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil;</div><div class=\"line\">- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;</div></pre></td></tr></table></figure></p>\n<p>这两个初始化方法有啥区别？</p>\n<p>通常情况下，VC可以通过以下两种方式初始化：</p>\n<ol>\n<li>init<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">TestVC *vc = [[TestVC alloc] init];</div><div class=\"line\">XibTestVC *vc = [[XibTestVC alloc] initWithNibName:@&quot;XibTestVC&quot; bundle:nil];</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>当通过代码手动创建VC时，就会调用调用<strong>initWithNibName:bundle:</strong>这个方法。</p>\n<ol>\n<li>nib文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@&quot;TestXibViewController&quot; owner:nil options:nil] firstObject];</div><div class=\"line\">UIStoryboard *storybaord = [UIStoryboard storyboardWithName:@&quot;StoryboardVC&quot; bundle:nil];</div><div class=\"line\">StoryboardVC *vc = [storybaord instantiateInitialViewController];</div></pre></td></tr></table></figure>\n<p><strong>initWithCoder:</strong>方法，则是所有固化（archived）对象的初始化器。当需要从nib文件中加载对象时，就会调用该方法。当这个方法调用时，nib中的固化对象都会被解固，但是此时还并未和<strong>outlets/actions</strong>关联。</p>\n<p>那是何时进行关联的呢？</p>\n<p>这就要提到两个方法：<strong>instantiateWithOwner:options:</strong> 和<strong>awakeFromNib</strong>。</p>\n<p><strong>instantiateWithOwner:options</strong>是UINib的类方法，它会将解固的对象和outlets/actions等进行关联。</p>\n<p>当nib文件中所有对象完成解固，并且和outlets/actions完成关联，系统就会调用awakeFromNib方法。</p>\n<p>所以通过nib文件初始化VC的整个流程大致就是：</p>\n<p><strong>NSBundle loadNibNamed:owner:options</strong> -> <strong>UIClassSwapper initWithCoder:</strong> -> <strong>VC initWithCoder</strong> -> <strong>UINib instantiateWithOwner:options:</strong> -> <strong>VC awakeFromNib</strong>。</p>\n<p>从UIStoryboard初始化的VC，关联过程和这不太一样，具体关联过程下章讲到View状态时再解释。</p>\n<p>另外，上面的两段初始化代码，可以看出，我们创建了两个xib文件，XibTestVC.xib和TestXibViewController.xib。同样是xib文件，为啥最后采用完全不同的初始化方法呢？</p>\n<p><img src=\"https://github.com/caterpillarFly/blogImages/blob/master/XibTestVC.xib.png?raw=true\" width=\"60%\" height=\"60%\"></p>\n<p><img src=\"https://github.com/caterpillarFly/blogImages/blob/master/TestXibViewController.xib.png?raw=true\" width=\"60%\" height=\"60%\"></p>\n<p>通过图片对比可以发现，上图只有View视图在xib中，而下图，整个VC（包括它的视图）都在xib中。</p>\n<p>当初始化XibTestVC时，并不需要初始化它的视图，所以只是传入了一个Xib文件名，这是后续初始化View需要的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">XibTestVC *vc = [[XibTestVC alloc] initWithNibName:@&quot;XibTestVC&quot; bundle:nil];</div></pre></td></tr></table></figure>\n<p>但是TestXibViewController初始化时，因为它的VC和视图都在Xib文件中，所以只能通过Xib文件来初始化VC和视图。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@&quot;TestXibViewController&quot; owner:nil options:nil] firstObject];</div></pre></td></tr></table></figure>\n"},{"title":"ViewController那些事儿（三）","date":"2018-04-13T09:59:56.000Z","_content":"\n# viewDidLoad何时调用\n\n那VC初始化完成后，viewDidLoad方法何时调用呢？通常我们是点击某个按钮，创建一个VC，然后push。\n\n```\n- (IBAction)buttonClicked:(id)sender\n{\n    TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] \t\t\n    loadNibNamed:@\"TestXibViewController\" owner:nil options:nil] firstObject];\n    /** 设置vc需要的参数*/\n\t[self.navigationController pushViewController:vc animated:YES];\n}\n```\n\n然后系统就会自动调用viewDidLoad方法了。\n\n如果是通过nib文件初始化的VC（TestXibViewController），那么当awakeFromNib方法调用后，系统会自动调用viewDidLoad。\n\n通过UIStoryboard创建的VC和initWithNibName:bundle:方法创建的VC，其viewDidLoad调用过程类似。那过程是怎么样的呢？\n\n**self.view——>loadViewIfRequired（VC私有方法）——>loadView——>_loadViewFromNibNamed:bundle——>给view赋值——>访问window，设置view大小——>viewDidLoad**\n\n","source":"_posts/ViewController那些事儿（三）.md","raw":"---\ntitle: ViewController那些事儿（三）\ndate: 2018-04-13 17:59:56\ntags:\n---\n\n# viewDidLoad何时调用\n\n那VC初始化完成后，viewDidLoad方法何时调用呢？通常我们是点击某个按钮，创建一个VC，然后push。\n\n```\n- (IBAction)buttonClicked:(id)sender\n{\n    TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] \t\t\n    loadNibNamed:@\"TestXibViewController\" owner:nil options:nil] firstObject];\n    /** 设置vc需要的参数*/\n\t[self.navigationController pushViewController:vc animated:YES];\n}\n```\n\n然后系统就会自动调用viewDidLoad方法了。\n\n如果是通过nib文件初始化的VC（TestXibViewController），那么当awakeFromNib方法调用后，系统会自动调用viewDidLoad。\n\n通过UIStoryboard创建的VC和initWithNibName:bundle:方法创建的VC，其viewDidLoad调用过程类似。那过程是怎么样的呢？\n\n**self.view——>loadViewIfRequired（VC私有方法）——>loadView——>_loadViewFromNibNamed:bundle——>给view赋值——>访问window，设置view大小——>viewDidLoad**\n\n","slug":"ViewController那些事儿（三）","published":1,"updated":"2018-04-13T10:23:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxt7o5h0002px91gjdhdh6o","content":"<h1 id=\"viewDidLoad何时调用\"><a href=\"#viewDidLoad何时调用\" class=\"headerlink\" title=\"viewDidLoad何时调用\"></a>viewDidLoad何时调用</h1><p>那VC初始化完成后，viewDidLoad方法何时调用呢？通常我们是点击某个按钮，创建一个VC，然后push。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (IBAction)buttonClicked:(id)sender</div><div class=\"line\">&#123;</div><div class=\"line\">    TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] \t\t</div><div class=\"line\">    loadNibNamed:@&quot;TestXibViewController&quot; owner:nil options:nil] firstObject];</div><div class=\"line\">    /** 设置vc需要的参数*/</div><div class=\"line\">\t[self.navigationController pushViewController:vc animated:YES];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后系统就会自动调用viewDidLoad方法了。</p>\n<p>如果是通过nib文件初始化的VC（TestXibViewController），那么当awakeFromNib方法调用后，系统会自动调用viewDidLoad。</p>\n<p>通过UIStoryboard创建的VC和initWithNibName:bundle:方法创建的VC，其viewDidLoad调用过程类似。那过程是怎么样的呢？</p>\n<p><strong>self.view——&gt;loadViewIfRequired（VC私有方法）——&gt;loadView——&gt;_loadViewFromNibNamed:bundle——&gt;给view赋值——&gt;访问window，设置view大小——&gt;viewDidLoad</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"viewDidLoad何时调用\"><a href=\"#viewDidLoad何时调用\" class=\"headerlink\" title=\"viewDidLoad何时调用\"></a>viewDidLoad何时调用</h1><p>那VC初始化完成后，viewDidLoad方法何时调用呢？通常我们是点击某个按钮，创建一个VC，然后push。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (IBAction)buttonClicked:(id)sender</div><div class=\"line\">&#123;</div><div class=\"line\">    TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] \t\t</div><div class=\"line\">    loadNibNamed:@&quot;TestXibViewController&quot; owner:nil options:nil] firstObject];</div><div class=\"line\">    /** 设置vc需要的参数*/</div><div class=\"line\">\t[self.navigationController pushViewController:vc animated:YES];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后系统就会自动调用viewDidLoad方法了。</p>\n<p>如果是通过nib文件初始化的VC（TestXibViewController），那么当awakeFromNib方法调用后，系统会自动调用viewDidLoad。</p>\n<p>通过UIStoryboard创建的VC和initWithNibName:bundle:方法创建的VC，其viewDidLoad调用过程类似。那过程是怎么样的呢？</p>\n<p><strong>self.view——&gt;loadViewIfRequired（VC私有方法）——&gt;loadView——&gt;_loadViewFromNibNamed:bundle——&gt;给view赋值——&gt;访问window，设置view大小——&gt;viewDidLoad</strong></p>\n"},{"title":"ViewController那些事儿（二）","date":"2018-04-13T09:04:38.000Z","_content":"\n# view的状态\n\n[上篇][1]文章提到了ViewController两个指定初始化方法\n\n```objective-c\n- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil;\n- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;\n```\n\n那当VC分别用这两个方法完成初始化后，View是什么状态呢？已初始化还是未初始化？这得分情况：\n\n当VC是通过Xib文件初始化时，\n\n```objective-c\nTestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@\"TestXibViewController\" owner:nil options:nil] firstObject];\n//[self.navigationController pushViewController:vc animated:YES];\n```\n\n**loadNibNamed:owner:options:**方法结束后，View就已经被初始化好，且所有的**outlets/actions**已经设置好。\n\n上篇文章提到，从UIStoryboard初始化的VC，关联过程和这不太一样。那从UIStoryboard初始化的VC，View处于什么状态呢？\n\n```objective-c\nUIStoryboard *storybaord = [UIStoryboard storyboardWithName:@\"StoryboardVC\" bundle:nil];\nStoryboardVC *vc = [storybaord instantiateInitialViewController];\n//[self.navigationController pushViewController:vc animated:YES];\n```\n\nUIStoryboard和UINib的处理方式不一样，虽然都是调用的**initWithCoder:**方法，但是结果却大不一样。\n\n当调用**instantiateInitialViewController**方法得到VC时，虽然底层也调用了**instantiateWithOwner:options**方法，但是View并没有初始化，所有的**outlets/actions**也未关联。那他们是什么时候关联的呢？\n\n当通过**initWithNibName:bundle:**方法初始化VC时，Vew也没有初始化，还是处于nil状态。为什么呢，参数里不是有nib文件名称吗？答案是苹果对内存的优化，所以使用延迟加载，**直到开发人员调用self.view**的时候，才会去初始化view。Storyboard也是类似的过程。（事实上，开发人员一般不会初始化完成就调用self.view，通常都是用导航控制器来执行push操作）\n\n那view是如何初始化的呢？答案是loadView，该方法是VC用来初始化或者说加载view。具体加载过程如下：\n\n```objective-c\n- (void)loadView\n{\n  if (nib){ \n    loadNib;\n  }\n  else{\n    createEmptyView;\n  }\n}\n```\n\nVC初始化时，如果传递了相应的nib参数，就加载指定的nib文件。如果没传，就按照一定的nib文件查找规则进行查找，找到了，那就加载找到的nib文件；没找到，就创建一个空的view。（[[UIVew alloc] init]）\n\n## xib查找规则\n\n那这个nib文件查找规则是怎样的呢？大多数教程说的都是直接查找与VC同名的nib文件。真是这样的吗？请看下面fabric统计的一个崩溃。\n\n<img src=\"https://github.com/caterpillarFly/blogImages/blob/master/MGAlertViewControllerCrash.png?raw=true\"/>\n\n这个崩溃只出现在**iOS8**的系统上。工程里面，存在两个类，**MGAlertViewController**，**MGAlertView**。这两个类都有各自的xib文件，即：MGAlertViewController.xib和MGAlertView.xib。\n\n代码中对MGAlertViewController的初始化，并没有传递nib名称，直接使用的：\n\n```objective-c\n[[MGAlertViewController alloc] init]\n```\n\n如果按照上述的xib查找规则，那么会找到MGAlertViewController.xib文件，这没有任何问题。\n\n但是在iOS8的机型上，却找到了MGAlertView.xib文件，当对MGAlertView.xib文件中对象解固完成并进行关联时，没有设置view关联，所以发生了崩溃。\n\n为什么iOS8和iOS9找到的xib文件不一样呢？只能猜测iOS8和iOS8以上系统的xib查找规则不同。没有找到英文资料说明这一差异，有篇[中文博客][1]，简单讲述了xib的查找规则。\n\n总结下查找规则：\n\n以MGAlertViewController为例，如果初始化时没传xib文件名称，那么系统首先会找与控制器名字一样，但是去掉Controller后缀，也就是MGAlertView.xib文件，找到了则使用这个xib文件。如果没找到，就会找与控制器名字一样的xib文件，即MGAlertViewController.xib。\n\n以上就是View的初始化过程","source":"_posts/ViewController那些事儿（二）.md","raw":"---\ntitle: ViewController那些事儿（二）\ndate: 2018-04-13 17:04:38\ntags:\n---\n\n# view的状态\n\n[上篇][1]文章提到了ViewController两个指定初始化方法\n\n```objective-c\n- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil;\n- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;\n```\n\n那当VC分别用这两个方法完成初始化后，View是什么状态呢？已初始化还是未初始化？这得分情况：\n\n当VC是通过Xib文件初始化时，\n\n```objective-c\nTestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@\"TestXibViewController\" owner:nil options:nil] firstObject];\n//[self.navigationController pushViewController:vc animated:YES];\n```\n\n**loadNibNamed:owner:options:**方法结束后，View就已经被初始化好，且所有的**outlets/actions**已经设置好。\n\n上篇文章提到，从UIStoryboard初始化的VC，关联过程和这不太一样。那从UIStoryboard初始化的VC，View处于什么状态呢？\n\n```objective-c\nUIStoryboard *storybaord = [UIStoryboard storyboardWithName:@\"StoryboardVC\" bundle:nil];\nStoryboardVC *vc = [storybaord instantiateInitialViewController];\n//[self.navigationController pushViewController:vc animated:YES];\n```\n\nUIStoryboard和UINib的处理方式不一样，虽然都是调用的**initWithCoder:**方法，但是结果却大不一样。\n\n当调用**instantiateInitialViewController**方法得到VC时，虽然底层也调用了**instantiateWithOwner:options**方法，但是View并没有初始化，所有的**outlets/actions**也未关联。那他们是什么时候关联的呢？\n\n当通过**initWithNibName:bundle:**方法初始化VC时，Vew也没有初始化，还是处于nil状态。为什么呢，参数里不是有nib文件名称吗？答案是苹果对内存的优化，所以使用延迟加载，**直到开发人员调用self.view**的时候，才会去初始化view。Storyboard也是类似的过程。（事实上，开发人员一般不会初始化完成就调用self.view，通常都是用导航控制器来执行push操作）\n\n那view是如何初始化的呢？答案是loadView，该方法是VC用来初始化或者说加载view。具体加载过程如下：\n\n```objective-c\n- (void)loadView\n{\n  if (nib){ \n    loadNib;\n  }\n  else{\n    createEmptyView;\n  }\n}\n```\n\nVC初始化时，如果传递了相应的nib参数，就加载指定的nib文件。如果没传，就按照一定的nib文件查找规则进行查找，找到了，那就加载找到的nib文件；没找到，就创建一个空的view。（[[UIVew alloc] init]）\n\n## xib查找规则\n\n那这个nib文件查找规则是怎样的呢？大多数教程说的都是直接查找与VC同名的nib文件。真是这样的吗？请看下面fabric统计的一个崩溃。\n\n<img src=\"https://github.com/caterpillarFly/blogImages/blob/master/MGAlertViewControllerCrash.png?raw=true\"/>\n\n这个崩溃只出现在**iOS8**的系统上。工程里面，存在两个类，**MGAlertViewController**，**MGAlertView**。这两个类都有各自的xib文件，即：MGAlertViewController.xib和MGAlertView.xib。\n\n代码中对MGAlertViewController的初始化，并没有传递nib名称，直接使用的：\n\n```objective-c\n[[MGAlertViewController alloc] init]\n```\n\n如果按照上述的xib查找规则，那么会找到MGAlertViewController.xib文件，这没有任何问题。\n\n但是在iOS8的机型上，却找到了MGAlertView.xib文件，当对MGAlertView.xib文件中对象解固完成并进行关联时，没有设置view关联，所以发生了崩溃。\n\n为什么iOS8和iOS9找到的xib文件不一样呢？只能猜测iOS8和iOS8以上系统的xib查找规则不同。没有找到英文资料说明这一差异，有篇[中文博客][1]，简单讲述了xib的查找规则。\n\n总结下查找规则：\n\n以MGAlertViewController为例，如果初始化时没传xib文件名称，那么系统首先会找与控制器名字一样，但是去掉Controller后缀，也就是MGAlertView.xib文件，找到了则使用这个xib文件。如果没找到，就会找与控制器名字一样的xib文件，即MGAlertViewController.xib。\n\n以上就是View的初始化过程","slug":"ViewController那些事儿（二）","published":1,"updated":"2018-04-13T09:59:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxt7o5j0003px91rjwadl7d","content":"<h1 id=\"view的状态\"><a href=\"#view的状态\" class=\"headerlink\" title=\"view的状态\"></a>view的状态</h1><p>[上篇][1]文章提到了ViewController两个指定初始化方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil;</div><div class=\"line\">- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;</div></pre></td></tr></table></figure>\n<p>那当VC分别用这两个方法完成初始化后，View是什么状态呢？已初始化还是未初始化？这得分情况：</p>\n<p>当VC是通过Xib文件初始化时，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@&quot;TestXibViewController&quot; owner:nil options:nil] firstObject];</div><div class=\"line\">//[self.navigationController pushViewController:vc animated:YES];</div></pre></td></tr></table></figure>\n<p><strong>loadNibNamed:owner:options:</strong>方法结束后，View就已经被初始化好，且所有的<strong>outlets/actions</strong>已经设置好。</p>\n<p>上篇文章提到，从UIStoryboard初始化的VC，关联过程和这不太一样。那从UIStoryboard初始化的VC，View处于什么状态呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIStoryboard *storybaord = [UIStoryboard storyboardWithName:@&quot;StoryboardVC&quot; bundle:nil];</div><div class=\"line\">StoryboardVC *vc = [storybaord instantiateInitialViewController];</div><div class=\"line\">//[self.navigationController pushViewController:vc animated:YES];</div></pre></td></tr></table></figure>\n<p>UIStoryboard和UINib的处理方式不一样，虽然都是调用的<strong>initWithCoder:</strong>方法，但是结果却大不一样。</p>\n<p>当调用<strong>instantiateInitialViewController</strong>方法得到VC时，虽然底层也调用了<strong>instantiateWithOwner:options</strong>方法，但是View并没有初始化，所有的<strong>outlets/actions</strong>也未关联。那他们是什么时候关联的呢？</p>\n<p>当通过<strong>initWithNibName:bundle:</strong>方法初始化VC时，Vew也没有初始化，还是处于nil状态。为什么呢，参数里不是有nib文件名称吗？答案是苹果对内存的优化，所以使用延迟加载，<strong>直到开发人员调用self.view</strong>的时候，才会去初始化view。Storyboard也是类似的过程。（事实上，开发人员一般不会初始化完成就调用self.view，通常都是用导航控制器来执行push操作）</p>\n<p>那view是如何初始化的呢？答案是loadView，该方法是VC用来初始化或者说加载view。具体加载过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)loadView</div><div class=\"line\">&#123;</div><div class=\"line\">  if (nib)&#123; </div><div class=\"line\">    loadNib;</div><div class=\"line\">  &#125;</div><div class=\"line\">  else&#123;</div><div class=\"line\">    createEmptyView;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>VC初始化时，如果传递了相应的nib参数，就加载指定的nib文件。如果没传，就按照一定的nib文件查找规则进行查找，找到了，那就加载找到的nib文件；没找到，就创建一个空的view。（[[UIVew alloc] init]）</p>\n<h2 id=\"xib查找规则\"><a href=\"#xib查找规则\" class=\"headerlink\" title=\"xib查找规则\"></a>xib查找规则</h2><p>那这个nib文件查找规则是怎样的呢？大多数教程说的都是直接查找与VC同名的nib文件。真是这样的吗？请看下面fabric统计的一个崩溃。</p>\n<p><img src=\"https://github.com/caterpillarFly/blogImages/blob/master/MGAlertViewControllerCrash.png?raw=true\"></p>\n<p>这个崩溃只出现在<strong>iOS8</strong>的系统上。工程里面，存在两个类，<strong>MGAlertViewController</strong>，<strong>MGAlertView</strong>。这两个类都有各自的xib文件，即：MGAlertViewController.xib和MGAlertView.xib。</p>\n<p>代码中对MGAlertViewController的初始化，并没有传递nib名称，直接使用的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[MGAlertViewController alloc] init]</div></pre></td></tr></table></figure>\n<p>如果按照上述的xib查找规则，那么会找到MGAlertViewController.xib文件，这没有任何问题。</p>\n<p>但是在iOS8的机型上，却找到了MGAlertView.xib文件，当对MGAlertView.xib文件中对象解固完成并进行关联时，没有设置view关联，所以发生了崩溃。</p>\n<p>为什么iOS8和iOS9找到的xib文件不一样呢？只能猜测iOS8和iOS8以上系统的xib查找规则不同。没有找到英文资料说明这一差异，有篇[中文博客][1]，简单讲述了xib的查找规则。</p>\n<p>总结下查找规则：</p>\n<p>以MGAlertViewController为例，如果初始化时没传xib文件名称，那么系统首先会找与控制器名字一样，但是去掉Controller后缀，也就是MGAlertView.xib文件，找到了则使用这个xib文件。如果没找到，就会找与控制器名字一样的xib文件，即MGAlertViewController.xib。</p>\n<p>以上就是View的初始化过程</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"view的状态\"><a href=\"#view的状态\" class=\"headerlink\" title=\"view的状态\"></a>view的状态</h1><p>[上篇][1]文章提到了ViewController两个指定初始化方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (instancetype)initWithNibName:(nullable NSString *)nibNameOrNil bundle:(nullable NSBundle *)nibBundleOrNil;</div><div class=\"line\">- (nullable instancetype)initWithCoder:(NSCoder *)aDecoder;</div></pre></td></tr></table></figure>\n<p>那当VC分别用这两个方法完成初始化后，View是什么状态呢？已初始化还是未初始化？这得分情况：</p>\n<p>当VC是通过Xib文件初始化时，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">TestXibViewController *vc = (TestXibViewController *)[[[NSBundle mainBundle] loadNibNamed:@&quot;TestXibViewController&quot; owner:nil options:nil] firstObject];</div><div class=\"line\">//[self.navigationController pushViewController:vc animated:YES];</div></pre></td></tr></table></figure>\n<p><strong>loadNibNamed:owner:options:</strong>方法结束后，View就已经被初始化好，且所有的<strong>outlets/actions</strong>已经设置好。</p>\n<p>上篇文章提到，从UIStoryboard初始化的VC，关联过程和这不太一样。那从UIStoryboard初始化的VC，View处于什么状态呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIStoryboard *storybaord = [UIStoryboard storyboardWithName:@&quot;StoryboardVC&quot; bundle:nil];</div><div class=\"line\">StoryboardVC *vc = [storybaord instantiateInitialViewController];</div><div class=\"line\">//[self.navigationController pushViewController:vc animated:YES];</div></pre></td></tr></table></figure>\n<p>UIStoryboard和UINib的处理方式不一样，虽然都是调用的<strong>initWithCoder:</strong>方法，但是结果却大不一样。</p>\n<p>当调用<strong>instantiateInitialViewController</strong>方法得到VC时，虽然底层也调用了<strong>instantiateWithOwner:options</strong>方法，但是View并没有初始化，所有的<strong>outlets/actions</strong>也未关联。那他们是什么时候关联的呢？</p>\n<p>当通过<strong>initWithNibName:bundle:</strong>方法初始化VC时，Vew也没有初始化，还是处于nil状态。为什么呢，参数里不是有nib文件名称吗？答案是苹果对内存的优化，所以使用延迟加载，<strong>直到开发人员调用self.view</strong>的时候，才会去初始化view。Storyboard也是类似的过程。（事实上，开发人员一般不会初始化完成就调用self.view，通常都是用导航控制器来执行push操作）</p>\n<p>那view是如何初始化的呢？答案是loadView，该方法是VC用来初始化或者说加载view。具体加载过程如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (void)loadView</div><div class=\"line\">&#123;</div><div class=\"line\">  if (nib)&#123; </div><div class=\"line\">    loadNib;</div><div class=\"line\">  &#125;</div><div class=\"line\">  else&#123;</div><div class=\"line\">    createEmptyView;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>VC初始化时，如果传递了相应的nib参数，就加载指定的nib文件。如果没传，就按照一定的nib文件查找规则进行查找，找到了，那就加载找到的nib文件；没找到，就创建一个空的view。（[[UIVew alloc] init]）</p>\n<h2 id=\"xib查找规则\"><a href=\"#xib查找规则\" class=\"headerlink\" title=\"xib查找规则\"></a>xib查找规则</h2><p>那这个nib文件查找规则是怎样的呢？大多数教程说的都是直接查找与VC同名的nib文件。真是这样的吗？请看下面fabric统计的一个崩溃。</p>\n<p><img src=\"https://github.com/caterpillarFly/blogImages/blob/master/MGAlertViewControllerCrash.png?raw=true\"></p>\n<p>这个崩溃只出现在<strong>iOS8</strong>的系统上。工程里面，存在两个类，<strong>MGAlertViewController</strong>，<strong>MGAlertView</strong>。这两个类都有各自的xib文件，即：MGAlertViewController.xib和MGAlertView.xib。</p>\n<p>代码中对MGAlertViewController的初始化，并没有传递nib名称，直接使用的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[[MGAlertViewController alloc] init]</div></pre></td></tr></table></figure>\n<p>如果按照上述的xib查找规则，那么会找到MGAlertViewController.xib文件，这没有任何问题。</p>\n<p>但是在iOS8的机型上，却找到了MGAlertView.xib文件，当对MGAlertView.xib文件中对象解固完成并进行关联时，没有设置view关联，所以发生了崩溃。</p>\n<p>为什么iOS8和iOS9找到的xib文件不一样呢？只能猜测iOS8和iOS8以上系统的xib查找规则不同。没有找到英文资料说明这一差异，有篇[中文博客][1]，简单讲述了xib的查找规则。</p>\n<p>总结下查找规则：</p>\n<p>以MGAlertViewController为例，如果初始化时没传xib文件名称，那么系统首先会找与控制器名字一样，但是去掉Controller后缀，也就是MGAlertView.xib文件，找到了则使用这个xib文件。如果没找到，就会找与控制器名字一样的xib文件，即MGAlertViewController.xib。</p>\n<p>以上就是View的初始化过程</p>\n"},{"title":"iOS内存管理（一）","date":"2017-06-15T08:43:18.000Z","_content":"# 前言\n\n这两篇博文是阅读《iOS与OS X多线程和内存管理》之后整理得来的，有错误之处，请指正！\n\n# 引用计数\n\n顾名思义，引用计数是指内存管理中对引用采用计数的技术。 对于引用计数，我们很自然的联想到“某处有某物多少多少”而将注意力放在计数上。但更客观、正确的思考方式是：\n1. 自己生成的对象，自己持有\n\n2. 非自己生成的对象，自己也能持有\n\n3. 不再需要自己持有的对象时自己释放\n\n4. 非自己持有的对象无法释放\n\n上面出现了”生成“、”持有“、”释放“三个词，而在Object-C内存管理中，还应该加上”废弃“一词。各个词表示的Object-C方法表如下：\n\n| right aligned | Objective-C方法                  |\n| :------------ | ------------------------------ |\n| 生成并持有对象       | alloc/new/copy/mutableCopy 等方法 |\n| 持有对象          | retain 方法                      |\n| 释放对象          | release 方法                     |\n| 废弃对象          | dealloc 方法                     |\n\n这些有关Objective-C内存管理的方法，并没包含在语言中，而是在Cocoa框架中。准确的说由Foundation框架类库的NSObject类负责内存管理职责。以下将对表格进行简单说明\n\n# 自己生成的对象，自己持有\n\n使用以下名称开头的方法名意味着自己生成的对象只有自己持有：\n\n* alloc\n\n* new\n\n* copy\n\n* mutableCopy\n\n\n只要符合上述**以什么开头**的规则，且方法名满足**驼峰命名**要求，那么它们生成的对象也会被自己持有，比如：allocMyObject，newThatObject， copyThis，mutableCopyThat。相反，如果不符合驼峰命名，比如：allocate，newer，copying等方法所产生的对象则不会自己持有。\n\n# 非自己生成的对象，自己也能持有\n\n默认情况下，使用alloc/new/copy/mutableCopy以外的方法取得的对象，因为非自己生成，所以自己不是该对象的持有者。使用retain方法可以持有该对象：\n\n```objective-c\n//取得非（自己生成并持有）的对象，取得了对象的存在，但并不持有该对象\nid obj = [NSMutableArray array];\n//自己持有该对象\n[obj retain];\n```\n\n通过retain方法，非自己生成的对象跟用alloc/new/copy/mutableCopy方法生成的对象一样，成为自己持有的了。\n\n# 不在需要自己持有的对象时释放\n\n自己持有的对象，当不再需要时，必须自己进行释放。释放使用release方法。\n\n```objective-c\n//自己生成并持有对象\nid obj = [[NSObject alloc] init];\n//释放对象\n[obj release];\n//此时，指向对象的指针仍然保留在变量中，但对象一经释放，就绝对不能再访问\n```\n\n如此，由自己生成并持有的对象就释放了。对于非自己生成并持有的对象，如果使用retain方法变为自己持有，那么自己也得负责释放。\n\n```objective-c\n//取得非（自己生成并持有）的对象，取得了对象的存在，但并不持有该对象\nid obj = [NSMutableArray array];\n//自己持有该对象\n[obj retain];\n//释放对象\n[obj release];\n```\n\n思考一下，NSMutableArray类的array方法，因为它不是以alloc/new/copy/mutableCopy等名称开头，所以它不会持有生成的对象，但是它内部肯定调用了alloc来生成对象，从而取得了对象的存在。这是怎么实现的呢？？\n\n```objective-c\n+ (id)array\n{\n    //生成并自己持有对象\n    id obj = [[NSMutableArray alloc] init];\n    //取得对象的存在，但不再持有对象\n    [obj autorelease];\n    //如果没有调用autorelease方法，而是直接返回，那么obj没有调用release方法，所以没有被释放，外部调用方\n    //因为方法名为object，所以调用方并不会持有返回对象，从而也不会释放它，因此就会造成内存泄露\n    return obj;\n}\n\n//取得对象存在，但不持有该对象\nid obj = [obj0 object];\n```\n\n通过**autorelease**方法，我们可以取得对象的存在，但却不持有该对象。同时，autorelease方法使得对象在超出指定的生存范围时能够自动并正确的释放。\n当然，也能够通过retain方法将调用autorelease方法取得的对象变为自己持有。\n\n# 无法释放非自己持有的对象\n\n对于alloc/new/copy/mutableCopy方法生成并持有的对象，或是用retain方法持有的对象，持有者在不需要该对象的时候，有义务对其进行释放。而由此以外得到的对象，绝对不能释放。如果释放了非自己持有的对象，会Crash，Crash，Crash！！\n\n```objective-c\nid obj1 = [[NSObject alloc] init];\n//自己持有的对象，自己进行释放\n[obj1 release];\n\nid obj2 = [obj0 object];\n//非自己持有的对象，进行释放，后果Crash...\n[obj2 release];\n```\n\n以上四项内容就是引用计数的思考方式，接下来会介绍在ARC下，这些规则会有哪些变化。\n\n# 参考\n\n1. 《Objective-C高级编程——iOS与OS X多线程和内存管理》","source":"_posts/iOS内存管理（一）.md","raw":"---\ntitle: iOS内存管理（一）\ndate: 2017-06-15 16:43:18\ntags:\n---\n# 前言\n\n这两篇博文是阅读《iOS与OS X多线程和内存管理》之后整理得来的，有错误之处，请指正！\n\n# 引用计数\n\n顾名思义，引用计数是指内存管理中对引用采用计数的技术。 对于引用计数，我们很自然的联想到“某处有某物多少多少”而将注意力放在计数上。但更客观、正确的思考方式是：\n1. 自己生成的对象，自己持有\n\n2. 非自己生成的对象，自己也能持有\n\n3. 不再需要自己持有的对象时自己释放\n\n4. 非自己持有的对象无法释放\n\n上面出现了”生成“、”持有“、”释放“三个词，而在Object-C内存管理中，还应该加上”废弃“一词。各个词表示的Object-C方法表如下：\n\n| right aligned | Objective-C方法                  |\n| :------------ | ------------------------------ |\n| 生成并持有对象       | alloc/new/copy/mutableCopy 等方法 |\n| 持有对象          | retain 方法                      |\n| 释放对象          | release 方法                     |\n| 废弃对象          | dealloc 方法                     |\n\n这些有关Objective-C内存管理的方法，并没包含在语言中，而是在Cocoa框架中。准确的说由Foundation框架类库的NSObject类负责内存管理职责。以下将对表格进行简单说明\n\n# 自己生成的对象，自己持有\n\n使用以下名称开头的方法名意味着自己生成的对象只有自己持有：\n\n* alloc\n\n* new\n\n* copy\n\n* mutableCopy\n\n\n只要符合上述**以什么开头**的规则，且方法名满足**驼峰命名**要求，那么它们生成的对象也会被自己持有，比如：allocMyObject，newThatObject， copyThis，mutableCopyThat。相反，如果不符合驼峰命名，比如：allocate，newer，copying等方法所产生的对象则不会自己持有。\n\n# 非自己生成的对象，自己也能持有\n\n默认情况下，使用alloc/new/copy/mutableCopy以外的方法取得的对象，因为非自己生成，所以自己不是该对象的持有者。使用retain方法可以持有该对象：\n\n```objective-c\n//取得非（自己生成并持有）的对象，取得了对象的存在，但并不持有该对象\nid obj = [NSMutableArray array];\n//自己持有该对象\n[obj retain];\n```\n\n通过retain方法，非自己生成的对象跟用alloc/new/copy/mutableCopy方法生成的对象一样，成为自己持有的了。\n\n# 不在需要自己持有的对象时释放\n\n自己持有的对象，当不再需要时，必须自己进行释放。释放使用release方法。\n\n```objective-c\n//自己生成并持有对象\nid obj = [[NSObject alloc] init];\n//释放对象\n[obj release];\n//此时，指向对象的指针仍然保留在变量中，但对象一经释放，就绝对不能再访问\n```\n\n如此，由自己生成并持有的对象就释放了。对于非自己生成并持有的对象，如果使用retain方法变为自己持有，那么自己也得负责释放。\n\n```objective-c\n//取得非（自己生成并持有）的对象，取得了对象的存在，但并不持有该对象\nid obj = [NSMutableArray array];\n//自己持有该对象\n[obj retain];\n//释放对象\n[obj release];\n```\n\n思考一下，NSMutableArray类的array方法，因为它不是以alloc/new/copy/mutableCopy等名称开头，所以它不会持有生成的对象，但是它内部肯定调用了alloc来生成对象，从而取得了对象的存在。这是怎么实现的呢？？\n\n```objective-c\n+ (id)array\n{\n    //生成并自己持有对象\n    id obj = [[NSMutableArray alloc] init];\n    //取得对象的存在，但不再持有对象\n    [obj autorelease];\n    //如果没有调用autorelease方法，而是直接返回，那么obj没有调用release方法，所以没有被释放，外部调用方\n    //因为方法名为object，所以调用方并不会持有返回对象，从而也不会释放它，因此就会造成内存泄露\n    return obj;\n}\n\n//取得对象存在，但不持有该对象\nid obj = [obj0 object];\n```\n\n通过**autorelease**方法，我们可以取得对象的存在，但却不持有该对象。同时，autorelease方法使得对象在超出指定的生存范围时能够自动并正确的释放。\n当然，也能够通过retain方法将调用autorelease方法取得的对象变为自己持有。\n\n# 无法释放非自己持有的对象\n\n对于alloc/new/copy/mutableCopy方法生成并持有的对象，或是用retain方法持有的对象，持有者在不需要该对象的时候，有义务对其进行释放。而由此以外得到的对象，绝对不能释放。如果释放了非自己持有的对象，会Crash，Crash，Crash！！\n\n```objective-c\nid obj1 = [[NSObject alloc] init];\n//自己持有的对象，自己进行释放\n[obj1 release];\n\nid obj2 = [obj0 object];\n//非自己持有的对象，进行释放，后果Crash...\n[obj2 release];\n```\n\n以上四项内容就是引用计数的思考方式，接下来会介绍在ARC下，这些规则会有哪些变化。\n\n# 参考\n\n1. 《Objective-C高级编程——iOS与OS X多线程和内存管理》","slug":"iOS内存管理（一）","published":1,"updated":"2017-12-23T08:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxt7o5k0004px91zz7y9ibb","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这两篇博文是阅读《iOS与OS X多线程和内存管理》之后整理得来的，有错误之处，请指正！</p>\n<h1 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h1><p>顾名思义，引用计数是指内存管理中对引用采用计数的技术。 对于引用计数，我们很自然的联想到“某处有某物多少多少”而将注意力放在计数上。但更客观、正确的思考方式是：</p>\n<ol>\n<li><p>自己生成的对象，自己持有</p>\n</li>\n<li><p>非自己生成的对象，自己也能持有</p>\n</li>\n<li><p>不再需要自己持有的对象时自己释放</p>\n</li>\n<li><p>非自己持有的对象无法释放</p>\n</li>\n</ol>\n<p>上面出现了”生成“、”持有“、”释放“三个词，而在Object-C内存管理中，还应该加上”废弃“一词。各个词表示的Object-C方法表如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">right aligned</th>\n<th>Objective-C方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">生成并持有对象</td>\n<td>alloc/new/copy/mutableCopy 等方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持有对象</td>\n<td>retain 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">释放对象</td>\n<td>release 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">废弃对象</td>\n<td>dealloc 方法</td>\n</tr>\n</tbody>\n</table>\n<p>这些有关Objective-C内存管理的方法，并没包含在语言中，而是在Cocoa框架中。准确的说由Foundation框架类库的NSObject类负责内存管理职责。以下将对表格进行简单说明</p>\n<h1 id=\"自己生成的对象，自己持有\"><a href=\"#自己生成的对象，自己持有\" class=\"headerlink\" title=\"自己生成的对象，自己持有\"></a>自己生成的对象，自己持有</h1><p>使用以下名称开头的方法名意味着自己生成的对象只有自己持有：</p>\n<ul>\n<li><p>alloc</p>\n</li>\n<li><p>new</p>\n</li>\n<li><p>copy</p>\n</li>\n<li><p>mutableCopy</p>\n</li>\n</ul>\n<p>只要符合上述<strong>以什么开头</strong>的规则，且方法名满足<strong>驼峰命名</strong>要求，那么它们生成的对象也会被自己持有，比如：allocMyObject，newThatObject， copyThis，mutableCopyThat。相反，如果不符合驼峰命名，比如：allocate，newer，copying等方法所产生的对象则不会自己持有。</p>\n<h1 id=\"非自己生成的对象，自己也能持有\"><a href=\"#非自己生成的对象，自己也能持有\" class=\"headerlink\" title=\"非自己生成的对象，自己也能持有\"></a>非自己生成的对象，自己也能持有</h1><p>默认情况下，使用alloc/new/copy/mutableCopy以外的方法取得的对象，因为非自己生成，所以自己不是该对象的持有者。使用retain方法可以持有该对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//取得非（自己生成并持有）的对象，取得了对象的存在，但并不持有该对象</div><div class=\"line\">id obj = [NSMutableArray array];</div><div class=\"line\">//自己持有该对象</div><div class=\"line\">[obj retain];</div></pre></td></tr></table></figure>\n<p>通过retain方法，非自己生成的对象跟用alloc/new/copy/mutableCopy方法生成的对象一样，成为自己持有的了。</p>\n<h1 id=\"不在需要自己持有的对象时释放\"><a href=\"#不在需要自己持有的对象时释放\" class=\"headerlink\" title=\"不在需要自己持有的对象时释放\"></a>不在需要自己持有的对象时释放</h1><p>自己持有的对象，当不再需要时，必须自己进行释放。释放使用release方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//自己生成并持有对象</div><div class=\"line\">id obj = [[NSObject alloc] init];</div><div class=\"line\">//释放对象</div><div class=\"line\">[obj release];</div><div class=\"line\">//此时，指向对象的指针仍然保留在变量中，但对象一经释放，就绝对不能再访问</div></pre></td></tr></table></figure>\n<p>如此，由自己生成并持有的对象就释放了。对于非自己生成并持有的对象，如果使用retain方法变为自己持有，那么自己也得负责释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//取得非（自己生成并持有）的对象，取得了对象的存在，但并不持有该对象</div><div class=\"line\">id obj = [NSMutableArray array];</div><div class=\"line\">//自己持有该对象</div><div class=\"line\">[obj retain];</div><div class=\"line\">//释放对象</div><div class=\"line\">[obj release];</div></pre></td></tr></table></figure>\n<p>思考一下，NSMutableArray类的array方法，因为它不是以alloc/new/copy/mutableCopy等名称开头，所以它不会持有生成的对象，但是它内部肯定调用了alloc来生成对象，从而取得了对象的存在。这是怎么实现的呢？？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (id)array</div><div class=\"line\">&#123;</div><div class=\"line\">    //生成并自己持有对象</div><div class=\"line\">    id obj = [[NSMutableArray alloc] init];</div><div class=\"line\">    //取得对象的存在，但不再持有对象</div><div class=\"line\">    [obj autorelease];</div><div class=\"line\">    //如果没有调用autorelease方法，而是直接返回，那么obj没有调用release方法，所以没有被释放，外部调用方</div><div class=\"line\">    //因为方法名为object，所以调用方并不会持有返回对象，从而也不会释放它，因此就会造成内存泄露</div><div class=\"line\">    return obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//取得对象存在，但不持有该对象</div><div class=\"line\">id obj = [obj0 object];</div></pre></td></tr></table></figure>\n<p>通过<strong>autorelease</strong>方法，我们可以取得对象的存在，但却不持有该对象。同时，autorelease方法使得对象在超出指定的生存范围时能够自动并正确的释放。<br>当然，也能够通过retain方法将调用autorelease方法取得的对象变为自己持有。</p>\n<h1 id=\"无法释放非自己持有的对象\"><a href=\"#无法释放非自己持有的对象\" class=\"headerlink\" title=\"无法释放非自己持有的对象\"></a>无法释放非自己持有的对象</h1><p>对于alloc/new/copy/mutableCopy方法生成并持有的对象，或是用retain方法持有的对象，持有者在不需要该对象的时候，有义务对其进行释放。而由此以外得到的对象，绝对不能释放。如果释放了非自己持有的对象，会Crash，Crash，Crash！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">id obj1 = [[NSObject alloc] init];</div><div class=\"line\">//自己持有的对象，自己进行释放</div><div class=\"line\">[obj1 release];</div><div class=\"line\"></div><div class=\"line\">id obj2 = [obj0 object];</div><div class=\"line\">//非自己持有的对象，进行释放，后果Crash...</div><div class=\"line\">[obj2 release];</div></pre></td></tr></table></figure>\n<p>以上四项内容就是引用计数的思考方式，接下来会介绍在ARC下，这些规则会有哪些变化。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li>《Objective-C高级编程——iOS与OS X多线程和内存管理》</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>这两篇博文是阅读《iOS与OS X多线程和内存管理》之后整理得来的，有错误之处，请指正！</p>\n<h1 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h1><p>顾名思义，引用计数是指内存管理中对引用采用计数的技术。 对于引用计数，我们很自然的联想到“某处有某物多少多少”而将注意力放在计数上。但更客观、正确的思考方式是：</p>\n<ol>\n<li><p>自己生成的对象，自己持有</p>\n</li>\n<li><p>非自己生成的对象，自己也能持有</p>\n</li>\n<li><p>不再需要自己持有的对象时自己释放</p>\n</li>\n<li><p>非自己持有的对象无法释放</p>\n</li>\n</ol>\n<p>上面出现了”生成“、”持有“、”释放“三个词，而在Object-C内存管理中，还应该加上”废弃“一词。各个词表示的Object-C方法表如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">right aligned</th>\n<th>Objective-C方法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">生成并持有对象</td>\n<td>alloc/new/copy/mutableCopy 等方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">持有对象</td>\n<td>retain 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">释放对象</td>\n<td>release 方法</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">废弃对象</td>\n<td>dealloc 方法</td>\n</tr>\n</tbody>\n</table>\n<p>这些有关Objective-C内存管理的方法，并没包含在语言中，而是在Cocoa框架中。准确的说由Foundation框架类库的NSObject类负责内存管理职责。以下将对表格进行简单说明</p>\n<h1 id=\"自己生成的对象，自己持有\"><a href=\"#自己生成的对象，自己持有\" class=\"headerlink\" title=\"自己生成的对象，自己持有\"></a>自己生成的对象，自己持有</h1><p>使用以下名称开头的方法名意味着自己生成的对象只有自己持有：</p>\n<ul>\n<li><p>alloc</p>\n</li>\n<li><p>new</p>\n</li>\n<li><p>copy</p>\n</li>\n<li><p>mutableCopy</p>\n</li>\n</ul>\n<p>只要符合上述<strong>以什么开头</strong>的规则，且方法名满足<strong>驼峰命名</strong>要求，那么它们生成的对象也会被自己持有，比如：allocMyObject，newThatObject， copyThis，mutableCopyThat。相反，如果不符合驼峰命名，比如：allocate，newer，copying等方法所产生的对象则不会自己持有。</p>\n<h1 id=\"非自己生成的对象，自己也能持有\"><a href=\"#非自己生成的对象，自己也能持有\" class=\"headerlink\" title=\"非自己生成的对象，自己也能持有\"></a>非自己生成的对象，自己也能持有</h1><p>默认情况下，使用alloc/new/copy/mutableCopy以外的方法取得的对象，因为非自己生成，所以自己不是该对象的持有者。使用retain方法可以持有该对象：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//取得非（自己生成并持有）的对象，取得了对象的存在，但并不持有该对象</div><div class=\"line\">id obj = [NSMutableArray array];</div><div class=\"line\">//自己持有该对象</div><div class=\"line\">[obj retain];</div></pre></td></tr></table></figure>\n<p>通过retain方法，非自己生成的对象跟用alloc/new/copy/mutableCopy方法生成的对象一样，成为自己持有的了。</p>\n<h1 id=\"不在需要自己持有的对象时释放\"><a href=\"#不在需要自己持有的对象时释放\" class=\"headerlink\" title=\"不在需要自己持有的对象时释放\"></a>不在需要自己持有的对象时释放</h1><p>自己持有的对象，当不再需要时，必须自己进行释放。释放使用release方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//自己生成并持有对象</div><div class=\"line\">id obj = [[NSObject alloc] init];</div><div class=\"line\">//释放对象</div><div class=\"line\">[obj release];</div><div class=\"line\">//此时，指向对象的指针仍然保留在变量中，但对象一经释放，就绝对不能再访问</div></pre></td></tr></table></figure>\n<p>如此，由自己生成并持有的对象就释放了。对于非自己生成并持有的对象，如果使用retain方法变为自己持有，那么自己也得负责释放。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//取得非（自己生成并持有）的对象，取得了对象的存在，但并不持有该对象</div><div class=\"line\">id obj = [NSMutableArray array];</div><div class=\"line\">//自己持有该对象</div><div class=\"line\">[obj retain];</div><div class=\"line\">//释放对象</div><div class=\"line\">[obj release];</div></pre></td></tr></table></figure>\n<p>思考一下，NSMutableArray类的array方法，因为它不是以alloc/new/copy/mutableCopy等名称开头，所以它不会持有生成的对象，但是它内部肯定调用了alloc来生成对象，从而取得了对象的存在。这是怎么实现的呢？？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (id)array</div><div class=\"line\">&#123;</div><div class=\"line\">    //生成并自己持有对象</div><div class=\"line\">    id obj = [[NSMutableArray alloc] init];</div><div class=\"line\">    //取得对象的存在，但不再持有对象</div><div class=\"line\">    [obj autorelease];</div><div class=\"line\">    //如果没有调用autorelease方法，而是直接返回，那么obj没有调用release方法，所以没有被释放，外部调用方</div><div class=\"line\">    //因为方法名为object，所以调用方并不会持有返回对象，从而也不会释放它，因此就会造成内存泄露</div><div class=\"line\">    return obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//取得对象存在，但不持有该对象</div><div class=\"line\">id obj = [obj0 object];</div></pre></td></tr></table></figure>\n<p>通过<strong>autorelease</strong>方法，我们可以取得对象的存在，但却不持有该对象。同时，autorelease方法使得对象在超出指定的生存范围时能够自动并正确的释放。<br>当然，也能够通过retain方法将调用autorelease方法取得的对象变为自己持有。</p>\n<h1 id=\"无法释放非自己持有的对象\"><a href=\"#无法释放非自己持有的对象\" class=\"headerlink\" title=\"无法释放非自己持有的对象\"></a>无法释放非自己持有的对象</h1><p>对于alloc/new/copy/mutableCopy方法生成并持有的对象，或是用retain方法持有的对象，持有者在不需要该对象的时候，有义务对其进行释放。而由此以外得到的对象，绝对不能释放。如果释放了非自己持有的对象，会Crash，Crash，Crash！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">id obj1 = [[NSObject alloc] init];</div><div class=\"line\">//自己持有的对象，自己进行释放</div><div class=\"line\">[obj1 release];</div><div class=\"line\"></div><div class=\"line\">id obj2 = [obj0 object];</div><div class=\"line\">//非自己持有的对象，进行释放，后果Crash...</div><div class=\"line\">[obj2 release];</div></pre></td></tr></table></figure>\n<p>以上四项内容就是引用计数的思考方式，接下来会介绍在ARC下，这些规则会有哪些变化。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li>《Objective-C高级编程——iOS与OS X多线程和内存管理》</li>\n</ol>\n"},{"title":"iOS内存管理（二）","date":"2017-07-08T03:52:38.000Z","_content":"\n# 概要\n\nARC，即Automatic Reference Counting，字面意思“自动引用计数”， ARC只是自动的帮助我们处理“引用计数”相关的部分。关于引用计数的思考方式并没有发生变化，只是在源码的表述上稍有不同，发生了什么变化呢？首先要理解ARC中追加的所有权声明。\n\n# 所有权修饰符\n\nOC中，为了处理对象，将变量定义为id类型或各种对象类型，比如id，NSObject \\*等。在ARC有效时，OC对象类型同C语言其它类型不同，其类型上必须附加所有权修饰符。所有权修饰符一共有四种，是：\\_\\_strong，\\_\\_weak，\\_\\_unsafe\\_unretained，\\_\\_autoreleasing。附有这些修饰符的变量，会自动初始化为nil。以下对每种修饰符进行简单讲解。\n\n## \\_\\_strong修饰符\n\n\\_\\_strong修饰符表示对对象的“强引用”，持有强引用的变量在超出其作用域范围时被废弃，随着强引用的失效，其引用的对象会随之释放。（自动释放）\n\\_\\_strong修饰符是OC所有对象默认的所有权修饰符。也就是说，以下代码是等效的：\n```objective-c\n{\n  //自己生成并持有对象\n  id obj = [[NSObject alloc] init];\n  //和以下代码等价的\n  id __strong obj = [[NSObject alloc] init];\n}\n//obj超出其作用域，强引用失效，所以自动释放obj所持有的对象。该对象的所有者不存在，因此废弃该对象\n```\n\n在ARC无效的情况下，代码如下：\n```objective-c\n/* ARC无效 */\n{\n    //自己生成并持有对象\n    id obj = [[NSObject alloc] init];\n    //不再需要对象时，释放\n    [obj release];\n}\n```\n上述代码取得的是自己生成并持有的对象，那取得非自己生成并持有的对象该怎么办呢？\n```objective-c\n{\n  //自己非生成并持有对象\n  id __strong obj = [NSMutableArray array];\n  //因为变量obj为强引用，所以它自己持有对象\n}\n//obj超出其作用域，强引用失效，所以自动释放obj所持有的对象。该对象的所有者不存在，因此废弃该对象\n```\n其实上述代码，最终会被编译器转换成：\n\n```objective-c\nid obj = objc_msgSend(NSMutableArray, @selector(array));\nobjc_retainAutoreleasedReturnValue(obj);\nobjc_release(obj);\n```\n\n可以看出，\\_\\_strong修饰符可以自动持有对象，尽管对象非自己生成并持有的。\n通过上述几段代码，可以发现，“自己生成的对象，自己持有”和“非自己生成的对象，自己也能持有”这两条只需通过对带\\_\\_strong修饰符的变量赋值即可完成。而“不再需要持有的对象时自己释放”，当变量超出作用域范围（或者对变量进行重新赋值）时，会自动触发。最后一条“非自己持有的对象，自己不能释放“，由于不能调用release方法，所以这条自然也满足。\n\n## \\_\\_weak修饰符\n看起来好像通过\\_\\_strong修饰符就能很好的管理内存了，但是仅有\\_\\_strong是不够的，它无法解决引用计数式内存管理中无法避免的”**循环引用**“问题，所以才有\\_\\_weak修饰符。\n\\_\\_weak与\\_\\_strong相反，提供弱引用。弱引用不能持有对象实例。\\_\\_weak修饰符还有一个优点，即在持有某对象的弱引用时，若该对象被废弃，则次弱引用将自动置为nil，反过来，也可以通过检查有\\_\\_weak修饰符的变量是否为nil，来判断被赋值的对象是否被废弃。\n使用\\_\\_weak修饰符时需要注意，不能直接生成对象并对其赋值，如下：\n```objective-c\nid __weak obj = [[NSObject alloc] init];\n```\n[[NSObject alloc] init]属于自己生成并持有的对象，但\\_\\_weak修饰符不能持有对象实例，所以生成的对象会被立即释放，编译器对此会发出警告。\n```objective-c\n{\n  //obj0为强引用，自己生成并持有对象\n  id __strong obj0 = [[NSObject alloc] init];\n  //obj1持有生成对象的弱引用\n  id __weak obj1 = obj0;\n}\n//obj0超出作用域，强引用失效，所以自动释放它持有的对象。因为对象没有持有者了，所以废弃该对象\n```\n那又是如何做到\\_\\_weak变量，在它弱引用的对象释放后，自动置为nil的呢？\n\n答案是系统会维持一张weak表，也是散列表，该对象作为建，弱引用它的weak变量为值，如果有多个弱引用的话，则会形成类似链表的结构，所以当该对象自动释放时，会遍历这个weak表，找出它对应的弱引用，然后将它们置为nil，并删除相应的键值记录。由此可知，如果大量使用附有\\_\\_weak修饰符的变量，会消耗相应的CPU资源。\n\n## \\_\\_unsafe\\_unretained修饰符\n\n正如其名unsafe所言，是不安全的所有权修饰符。尽管ARC式的内存管理是编译器的工作，但附有\\_\\_unsafe\\_unretained修饰符的变量不属于编译器的内存管理对象。它的作用和\\_\\_weak修饰符变量类似，但它并不持有对象的强引用或弱引用，而且它表示的对象一旦被废弃，它并不会被置为nil，而是变成野指针，所以尽量不要使用\\_\\_unsafe\\_unretained。\n\n## \\_\\_autoreleasing修饰符\n\n无论ARC是否有效，都可使用非公开函数**\\_objc\\_autoreleasingPoolPrint()**来打印Pool信息。\n\n先看一下，在非ARC的情况下，怎么使用autorelease的。\n\n```objective-c\nNSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\nid obj = [[NSObject alloc] init];\n[obj autorelease];\n[pool drain];\n```\nNSAutoreleasePool对象的生命周期，相当于变量作用域。对该周期内，所有调用过autorelease方法的对象，在pool被废弃时，会自动向它发送release消息。\n在ARC情况下，代码可改写如下：\n```objective-c\n@autoreleasepool {\n    id __autoreleasing obj = [[NSObject alloc] init];\n}\n```\n@autoreleasepool{}来代替NSAutoreleasePool类对象的生成、持有以及废弃这一范围。通过给变量附加\\_\\_autoreleasing修饰符，来代替向变量发送autorelease消息，即对象被注册到autoreleasepool中。\n上一篇博文说道，如何获取非自己生成并持有的对象，主要就是通过在非alloc、new、copy、mutableCopy等方法返回的对象上调用autorelease方法。那在ARC的情况下又是怎么样的呢？\n\n```objective-c\n+ (id)array\n{\n    return [[NSMutableArray alloc] init];\n}\n```\n\n但是这段代码，经过编译器的转换之后，将变成：\n\n```\n+ (id)array\n{\n    id obj = objc_msgSend(NSMutableArray, @selector(alloc));\n    objc_msgSend(obj, @selector(init));\n    return objc_autoreleaseReturnValue(obj);\n}\n```\n\n转换的最后，调用了一个函数：**objc\\_autoreleaseReturnValue**，它与一般的**objc\\_autorelease**函数不同，它不仅限于注册对象到autoreleasePool中。它还有一个与之配对的函数：**objc\\_retainAutoreleasedReturnValue**。这对函数主要用于极致优化程序运行，怎么个优化法呢？\n\n**objc\\_autoreleaseReturnValue**函数会检查使用该函数的方法或函数调用方的执行命令列表，如果调用方在调用了该函数后紧接着调用**objc\\_retainAutoreleasedReturnValue**函数，那么久不讲返回的对象注册到autoreleasePool中，而是直接传递到函数的调用方。通过这两个函数，就可以不将对象注册到autoreleasePool中而直接传递，这一过程达到了最优化。\n\n所以，array方法返回的对象，不一定注册到了autoreleasePool中，那么看以下代码：\n\n```objective-c\n@autoreleasePool{\n    id __strong obj = [NSMutableArray array];\n    _objc_autoreleasingPoolPrint();     //打印当前释放池的信息\n}\n```\n\n猜想一下，Pool中是否有obj这一对象呢？经过试验，答案是没有，以上的优化过程可以解释为什么。\n\n前面说到，id obj其实就是id \\_\\_strong obj，那么id \\*obj呢，也是id \\_\\_strong \\*obj吗？答案是NO，它对应的是：id \\_\\_autoreleasing \\*obj；像这样，id的指针或对象的指针，在没有指定修饰符的情况下，默认会加上\\_\\_autoreleasing修饰符。\n\n我们经常看到一些方法，在参数里面返回error信息，方法声明如下：\n\n```objective-c\n- (BOOL)performOperationWithError:(NSError **)error;\n//等价于\n- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error;\n```\n\n调用如下：\n\n```objective-c\nNSError *error = nil;   //等价于NSError __strong *error\nBOOL result = [obj performOperationWithError:&error];\n```\n\n苹果自身很多API也是通过这样的方式返回错误信息的。\n\n但是，如果直接赋值，那么会产生编译器错误，代码如下：\n\n```objective-c\nNSError *error = nil;\nNSError **pError = &error;      //编译器会报错\n```\n\n这是因为，赋值给**指针对象**时，对象的所有权修饰符必须保持一致。因为error变量附加有\\_\\_strong修饰符，而pError则附加有\\_\\_autoreleasing修饰符，所以报错。可更改为：NSError  \\* \\_\\_strong  \\*pError = &error即可。\n\n但是，之前的函数调用，使用\\_\\_strong修饰符的error变量，并没有进行转换，也没有报错呀，这是为什么呢？这是因为编译器自动进行了如下转化：\n\n```objective-c\nNSError __strong *error = nil;\nNSError __autoreleasing *tmpError = error;\nBOOL result = [obj performOperationWithError:&error];\n```\n\n# 引用计数\n\n在ARC的情况下，怎么知道对象的引用计数值呢？\n\n**uintptr_t  _objc_rootRetainCount(id obj);**\n\n该函数可以取得对象的计数值。但是，该函数是非线程安全的，且对于已释放的对象和不正确的对象类型，返回的值也是不准确的。所以该函数只提供一个参考值。\n\n# 疑惑\n\n1. 书籍上说，在访问附有\\_\\_weak修饰符的变量时，实际上必定要访问注册到autoreleasePool中的对象，比如：\n\n   ```objective-c\n   id obj0 = [[NSObject alloc] init];\n   id __weak obj1 = obj0;\n   NSLog(@\"class=%@\",[obj1 class]);\n   ```\n\n   上述代码和一下代码相同：\n\n   ```objective-c\n   id __weak obj1 = obj0;\n   id __autoreleasing tmp = obj1;\n   NSLog(@\"class=%@\",[tmp class]);\n   ```\n\n   但实际试验结果和书上所说有所出入，如果把两段代码放入@autoreleasePool{}里面，然后打印Pool的信      息，就会发现下面的代码，池子里面包含了对象obj0，但是上面的代码则没有包含。所以访问\\_\\_weak变量，实际上必定访问注册到autoreleasePool中的对象，对此持保留态度。\n\n2. 我们一般都是这样使用：\n\n   ```objective-c\n   @autoreleasepool {\n       id obj = [[NSObject alloc] init];\n        id mArray = [NSMutableArray array];\n   }\n   ```\n\n   经过上面讲述的优化过程，知道obj和mArray并不会注册到autoreleasePool中，打印Pool信息，也确实没发现这两个对象。既然没注册到Pool里面，那么外面的@autoreleasepool{}块还有用吗？\n\n","source":"_posts/iOS内存管理（二）.md","raw":"---\ntitle: iOS内存管理（二）\ndate: 2017-07-08 11:52:38\ntags:\n---\n\n# 概要\n\nARC，即Automatic Reference Counting，字面意思“自动引用计数”， ARC只是自动的帮助我们处理“引用计数”相关的部分。关于引用计数的思考方式并没有发生变化，只是在源码的表述上稍有不同，发生了什么变化呢？首先要理解ARC中追加的所有权声明。\n\n# 所有权修饰符\n\nOC中，为了处理对象，将变量定义为id类型或各种对象类型，比如id，NSObject \\*等。在ARC有效时，OC对象类型同C语言其它类型不同，其类型上必须附加所有权修饰符。所有权修饰符一共有四种，是：\\_\\_strong，\\_\\_weak，\\_\\_unsafe\\_unretained，\\_\\_autoreleasing。附有这些修饰符的变量，会自动初始化为nil。以下对每种修饰符进行简单讲解。\n\n## \\_\\_strong修饰符\n\n\\_\\_strong修饰符表示对对象的“强引用”，持有强引用的变量在超出其作用域范围时被废弃，随着强引用的失效，其引用的对象会随之释放。（自动释放）\n\\_\\_strong修饰符是OC所有对象默认的所有权修饰符。也就是说，以下代码是等效的：\n```objective-c\n{\n  //自己生成并持有对象\n  id obj = [[NSObject alloc] init];\n  //和以下代码等价的\n  id __strong obj = [[NSObject alloc] init];\n}\n//obj超出其作用域，强引用失效，所以自动释放obj所持有的对象。该对象的所有者不存在，因此废弃该对象\n```\n\n在ARC无效的情况下，代码如下：\n```objective-c\n/* ARC无效 */\n{\n    //自己生成并持有对象\n    id obj = [[NSObject alloc] init];\n    //不再需要对象时，释放\n    [obj release];\n}\n```\n上述代码取得的是自己生成并持有的对象，那取得非自己生成并持有的对象该怎么办呢？\n```objective-c\n{\n  //自己非生成并持有对象\n  id __strong obj = [NSMutableArray array];\n  //因为变量obj为强引用，所以它自己持有对象\n}\n//obj超出其作用域，强引用失效，所以自动释放obj所持有的对象。该对象的所有者不存在，因此废弃该对象\n```\n其实上述代码，最终会被编译器转换成：\n\n```objective-c\nid obj = objc_msgSend(NSMutableArray, @selector(array));\nobjc_retainAutoreleasedReturnValue(obj);\nobjc_release(obj);\n```\n\n可以看出，\\_\\_strong修饰符可以自动持有对象，尽管对象非自己生成并持有的。\n通过上述几段代码，可以发现，“自己生成的对象，自己持有”和“非自己生成的对象，自己也能持有”这两条只需通过对带\\_\\_strong修饰符的变量赋值即可完成。而“不再需要持有的对象时自己释放”，当变量超出作用域范围（或者对变量进行重新赋值）时，会自动触发。最后一条“非自己持有的对象，自己不能释放“，由于不能调用release方法，所以这条自然也满足。\n\n## \\_\\_weak修饰符\n看起来好像通过\\_\\_strong修饰符就能很好的管理内存了，但是仅有\\_\\_strong是不够的，它无法解决引用计数式内存管理中无法避免的”**循环引用**“问题，所以才有\\_\\_weak修饰符。\n\\_\\_weak与\\_\\_strong相反，提供弱引用。弱引用不能持有对象实例。\\_\\_weak修饰符还有一个优点，即在持有某对象的弱引用时，若该对象被废弃，则次弱引用将自动置为nil，反过来，也可以通过检查有\\_\\_weak修饰符的变量是否为nil，来判断被赋值的对象是否被废弃。\n使用\\_\\_weak修饰符时需要注意，不能直接生成对象并对其赋值，如下：\n```objective-c\nid __weak obj = [[NSObject alloc] init];\n```\n[[NSObject alloc] init]属于自己生成并持有的对象，但\\_\\_weak修饰符不能持有对象实例，所以生成的对象会被立即释放，编译器对此会发出警告。\n```objective-c\n{\n  //obj0为强引用，自己生成并持有对象\n  id __strong obj0 = [[NSObject alloc] init];\n  //obj1持有生成对象的弱引用\n  id __weak obj1 = obj0;\n}\n//obj0超出作用域，强引用失效，所以自动释放它持有的对象。因为对象没有持有者了，所以废弃该对象\n```\n那又是如何做到\\_\\_weak变量，在它弱引用的对象释放后，自动置为nil的呢？\n\n答案是系统会维持一张weak表，也是散列表，该对象作为建，弱引用它的weak变量为值，如果有多个弱引用的话，则会形成类似链表的结构，所以当该对象自动释放时，会遍历这个weak表，找出它对应的弱引用，然后将它们置为nil，并删除相应的键值记录。由此可知，如果大量使用附有\\_\\_weak修饰符的变量，会消耗相应的CPU资源。\n\n## \\_\\_unsafe\\_unretained修饰符\n\n正如其名unsafe所言，是不安全的所有权修饰符。尽管ARC式的内存管理是编译器的工作，但附有\\_\\_unsafe\\_unretained修饰符的变量不属于编译器的内存管理对象。它的作用和\\_\\_weak修饰符变量类似，但它并不持有对象的强引用或弱引用，而且它表示的对象一旦被废弃，它并不会被置为nil，而是变成野指针，所以尽量不要使用\\_\\_unsafe\\_unretained。\n\n## \\_\\_autoreleasing修饰符\n\n无论ARC是否有效，都可使用非公开函数**\\_objc\\_autoreleasingPoolPrint()**来打印Pool信息。\n\n先看一下，在非ARC的情况下，怎么使用autorelease的。\n\n```objective-c\nNSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\nid obj = [[NSObject alloc] init];\n[obj autorelease];\n[pool drain];\n```\nNSAutoreleasePool对象的生命周期，相当于变量作用域。对该周期内，所有调用过autorelease方法的对象，在pool被废弃时，会自动向它发送release消息。\n在ARC情况下，代码可改写如下：\n```objective-c\n@autoreleasepool {\n    id __autoreleasing obj = [[NSObject alloc] init];\n}\n```\n@autoreleasepool{}来代替NSAutoreleasePool类对象的生成、持有以及废弃这一范围。通过给变量附加\\_\\_autoreleasing修饰符，来代替向变量发送autorelease消息，即对象被注册到autoreleasepool中。\n上一篇博文说道，如何获取非自己生成并持有的对象，主要就是通过在非alloc、new、copy、mutableCopy等方法返回的对象上调用autorelease方法。那在ARC的情况下又是怎么样的呢？\n\n```objective-c\n+ (id)array\n{\n    return [[NSMutableArray alloc] init];\n}\n```\n\n但是这段代码，经过编译器的转换之后，将变成：\n\n```\n+ (id)array\n{\n    id obj = objc_msgSend(NSMutableArray, @selector(alloc));\n    objc_msgSend(obj, @selector(init));\n    return objc_autoreleaseReturnValue(obj);\n}\n```\n\n转换的最后，调用了一个函数：**objc\\_autoreleaseReturnValue**，它与一般的**objc\\_autorelease**函数不同，它不仅限于注册对象到autoreleasePool中。它还有一个与之配对的函数：**objc\\_retainAutoreleasedReturnValue**。这对函数主要用于极致优化程序运行，怎么个优化法呢？\n\n**objc\\_autoreleaseReturnValue**函数会检查使用该函数的方法或函数调用方的执行命令列表，如果调用方在调用了该函数后紧接着调用**objc\\_retainAutoreleasedReturnValue**函数，那么久不讲返回的对象注册到autoreleasePool中，而是直接传递到函数的调用方。通过这两个函数，就可以不将对象注册到autoreleasePool中而直接传递，这一过程达到了最优化。\n\n所以，array方法返回的对象，不一定注册到了autoreleasePool中，那么看以下代码：\n\n```objective-c\n@autoreleasePool{\n    id __strong obj = [NSMutableArray array];\n    _objc_autoreleasingPoolPrint();     //打印当前释放池的信息\n}\n```\n\n猜想一下，Pool中是否有obj这一对象呢？经过试验，答案是没有，以上的优化过程可以解释为什么。\n\n前面说到，id obj其实就是id \\_\\_strong obj，那么id \\*obj呢，也是id \\_\\_strong \\*obj吗？答案是NO，它对应的是：id \\_\\_autoreleasing \\*obj；像这样，id的指针或对象的指针，在没有指定修饰符的情况下，默认会加上\\_\\_autoreleasing修饰符。\n\n我们经常看到一些方法，在参数里面返回error信息，方法声明如下：\n\n```objective-c\n- (BOOL)performOperationWithError:(NSError **)error;\n//等价于\n- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error;\n```\n\n调用如下：\n\n```objective-c\nNSError *error = nil;   //等价于NSError __strong *error\nBOOL result = [obj performOperationWithError:&error];\n```\n\n苹果自身很多API也是通过这样的方式返回错误信息的。\n\n但是，如果直接赋值，那么会产生编译器错误，代码如下：\n\n```objective-c\nNSError *error = nil;\nNSError **pError = &error;      //编译器会报错\n```\n\n这是因为，赋值给**指针对象**时，对象的所有权修饰符必须保持一致。因为error变量附加有\\_\\_strong修饰符，而pError则附加有\\_\\_autoreleasing修饰符，所以报错。可更改为：NSError  \\* \\_\\_strong  \\*pError = &error即可。\n\n但是，之前的函数调用，使用\\_\\_strong修饰符的error变量，并没有进行转换，也没有报错呀，这是为什么呢？这是因为编译器自动进行了如下转化：\n\n```objective-c\nNSError __strong *error = nil;\nNSError __autoreleasing *tmpError = error;\nBOOL result = [obj performOperationWithError:&error];\n```\n\n# 引用计数\n\n在ARC的情况下，怎么知道对象的引用计数值呢？\n\n**uintptr_t  _objc_rootRetainCount(id obj);**\n\n该函数可以取得对象的计数值。但是，该函数是非线程安全的，且对于已释放的对象和不正确的对象类型，返回的值也是不准确的。所以该函数只提供一个参考值。\n\n# 疑惑\n\n1. 书籍上说，在访问附有\\_\\_weak修饰符的变量时，实际上必定要访问注册到autoreleasePool中的对象，比如：\n\n   ```objective-c\n   id obj0 = [[NSObject alloc] init];\n   id __weak obj1 = obj0;\n   NSLog(@\"class=%@\",[obj1 class]);\n   ```\n\n   上述代码和一下代码相同：\n\n   ```objective-c\n   id __weak obj1 = obj0;\n   id __autoreleasing tmp = obj1;\n   NSLog(@\"class=%@\",[tmp class]);\n   ```\n\n   但实际试验结果和书上所说有所出入，如果把两段代码放入@autoreleasePool{}里面，然后打印Pool的信      息，就会发现下面的代码，池子里面包含了对象obj0，但是上面的代码则没有包含。所以访问\\_\\_weak变量，实际上必定访问注册到autoreleasePool中的对象，对此持保留态度。\n\n2. 我们一般都是这样使用：\n\n   ```objective-c\n   @autoreleasepool {\n       id obj = [[NSObject alloc] init];\n        id mArray = [NSMutableArray array];\n   }\n   ```\n\n   经过上面讲述的优化过程，知道obj和mArray并不会注册到autoreleasePool中，打印Pool信息，也确实没发现这两个对象。既然没注册到Pool里面，那么外面的@autoreleasepool{}块还有用吗？\n\n","slug":"iOS内存管理（二）","published":1,"updated":"2017-12-23T08:28:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxt7o5m0005px914sg93son","content":"<h1 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h1><p>ARC，即Automatic Reference Counting，字面意思“自动引用计数”， ARC只是自动的帮助我们处理“引用计数”相关的部分。关于引用计数的思考方式并没有发生变化，只是在源码的表述上稍有不同，发生了什么变化呢？首先要理解ARC中追加的所有权声明。</p>\n<h1 id=\"所有权修饰符\"><a href=\"#所有权修饰符\" class=\"headerlink\" title=\"所有权修饰符\"></a>所有权修饰符</h1><p>OC中，为了处理对象，将变量定义为id类型或各种对象类型，比如id，NSObject *等。在ARC有效时，OC对象类型同C语言其它类型不同，其类型上必须附加所有权修饰符。所有权修饰符一共有四种，是：__strong，__weak，__unsafe_unretained，__autoreleasing。附有这些修饰符的变量，会自动初始化为nil。以下对每种修饰符进行简单讲解。</p>\n<h2 id=\"strong修饰符\"><a href=\"#strong修饰符\" class=\"headerlink\" title=\"__strong修饰符\"></a>__strong修饰符</h2><p>__strong修饰符表示对对象的“强引用”，持有强引用的变量在超出其作用域范围时被废弃，随着强引用的失效，其引用的对象会随之释放。（自动释放）<br>__strong修饰符是OC所有对象默认的所有权修饰符。也就是说，以下代码是等效的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  //自己生成并持有对象</div><div class=\"line\">  id obj = [[NSObject alloc] init];</div><div class=\"line\">  //和以下代码等价的</div><div class=\"line\">  id __strong obj = [[NSObject alloc] init];</div><div class=\"line\">&#125;</div><div class=\"line\">//obj超出其作用域，强引用失效，所以自动释放obj所持有的对象。该对象的所有者不存在，因此废弃该对象</div></pre></td></tr></table></figure></p>\n<p>在ARC无效的情况下，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* ARC无效 */</div><div class=\"line\">&#123;</div><div class=\"line\">    //自己生成并持有对象</div><div class=\"line\">    id obj = [[NSObject alloc] init];</div><div class=\"line\">    //不再需要对象时，释放</div><div class=\"line\">    [obj release];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码取得的是自己生成并持有的对象，那取得非自己生成并持有的对象该怎么办呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  //自己非生成并持有对象</div><div class=\"line\">  id __strong obj = [NSMutableArray array];</div><div class=\"line\">  //因为变量obj为强引用，所以它自己持有对象</div><div class=\"line\">&#125;</div><div class=\"line\">//obj超出其作用域，强引用失效，所以自动释放obj所持有的对象。该对象的所有者不存在，因此废弃该对象</div></pre></td></tr></table></figure></p>\n<p>其实上述代码，最终会被编译器转换成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">id obj = objc_msgSend(NSMutableArray, @selector(array));</div><div class=\"line\">objc_retainAutoreleasedReturnValue(obj);</div><div class=\"line\">objc_release(obj);</div></pre></td></tr></table></figure>\n<p>可以看出，__strong修饰符可以自动持有对象，尽管对象非自己生成并持有的。<br>通过上述几段代码，可以发现，“自己生成的对象，自己持有”和“非自己生成的对象，自己也能持有”这两条只需通过对带__strong修饰符的变量赋值即可完成。而“不再需要持有的对象时自己释放”，当变量超出作用域范围（或者对变量进行重新赋值）时，会自动触发。最后一条“非自己持有的对象，自己不能释放“，由于不能调用release方法，所以这条自然也满足。</p>\n<h2 id=\"weak修饰符\"><a href=\"#weak修饰符\" class=\"headerlink\" title=\"__weak修饰符\"></a>__weak修饰符</h2><p>看起来好像通过__strong修饰符就能很好的管理内存了，但是仅有__strong是不够的，它无法解决引用计数式内存管理中无法避免的”<strong>循环引用</strong>“问题，所以才有__weak修饰符。<br>__weak与__strong相反，提供弱引用。弱引用不能持有对象实例。__weak修饰符还有一个优点，即在持有某对象的弱引用时，若该对象被废弃，则次弱引用将自动置为nil，反过来，也可以通过检查有__weak修饰符的变量是否为nil，来判断被赋值的对象是否被废弃。<br>使用__weak修饰符时需要注意，不能直接生成对象并对其赋值，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">id __weak obj = [[NSObject alloc] init];</div></pre></td></tr></table></figure></p>\n<p>[[NSObject alloc] init]属于自己生成并持有的对象，但__weak修饰符不能持有对象实例，所以生成的对象会被立即释放，编译器对此会发出警告。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  //obj0为强引用，自己生成并持有对象</div><div class=\"line\">  id __strong obj0 = [[NSObject alloc] init];</div><div class=\"line\">  //obj1持有生成对象的弱引用</div><div class=\"line\">  id __weak obj1 = obj0;</div><div class=\"line\">&#125;</div><div class=\"line\">//obj0超出作用域，强引用失效，所以自动释放它持有的对象。因为对象没有持有者了，所以废弃该对象</div></pre></td></tr></table></figure></p>\n<p>那又是如何做到__weak变量，在它弱引用的对象释放后，自动置为nil的呢？</p>\n<p>答案是系统会维持一张weak表，也是散列表，该对象作为建，弱引用它的weak变量为值，如果有多个弱引用的话，则会形成类似链表的结构，所以当该对象自动释放时，会遍历这个weak表，找出它对应的弱引用，然后将它们置为nil，并删除相应的键值记录。由此可知，如果大量使用附有__weak修饰符的变量，会消耗相应的CPU资源。</p>\n<h2 id=\"unsafe-unretained修饰符\"><a href=\"#unsafe-unretained修饰符\" class=\"headerlink\" title=\"__unsafe_unretained修饰符\"></a>__unsafe_unretained修饰符</h2><p>正如其名unsafe所言，是不安全的所有权修饰符。尽管ARC式的内存管理是编译器的工作，但附有__unsafe_unretained修饰符的变量不属于编译器的内存管理对象。它的作用和__weak修饰符变量类似，但它并不持有对象的强引用或弱引用，而且它表示的对象一旦被废弃，它并不会被置为nil，而是变成野指针，所以尽量不要使用__unsafe_unretained。</p>\n<h2 id=\"autoreleasing修饰符\"><a href=\"#autoreleasing修饰符\" class=\"headerlink\" title=\"__autoreleasing修饰符\"></a>__autoreleasing修饰符</h2><p>无论ARC是否有效，都可使用非公开函数<strong>_objc_autoreleasingPoolPrint()</strong>来打印Pool信息。</p>\n<p>先看一下，在非ARC的情况下，怎么使用autorelease的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];</div><div class=\"line\">id obj = [[NSObject alloc] init];</div><div class=\"line\">[obj autorelease];</div><div class=\"line\">[pool drain];</div></pre></td></tr></table></figure>\n<p>NSAutoreleasePool对象的生命周期，相当于变量作用域。对该周期内，所有调用过autorelease方法的对象，在pool被废弃时，会自动向它发送release消息。<br>在ARC情况下，代码可改写如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@autoreleasepool &#123;</div><div class=\"line\">    id __autoreleasing obj = [[NSObject alloc] init];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>@autoreleasepool{}来代替NSAutoreleasePool类对象的生成、持有以及废弃这一范围。通过给变量附加__autoreleasing修饰符，来代替向变量发送autorelease消息，即对象被注册到autoreleasepool中。<br>上一篇博文说道，如何获取非自己生成并持有的对象，主要就是通过在非alloc、new、copy、mutableCopy等方法返回的对象上调用autorelease方法。那在ARC的情况下又是怎么样的呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (id)array</div><div class=\"line\">&#123;</div><div class=\"line\">    return [[NSMutableArray alloc] init];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是这段代码，经过编译器的转换之后，将变成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (id)array</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj = objc_msgSend(NSMutableArray, @selector(alloc));</div><div class=\"line\">    objc_msgSend(obj, @selector(init));</div><div class=\"line\">    return objc_autoreleaseReturnValue(obj);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>转换的最后，调用了一个函数：<strong>objc_autoreleaseReturnValue</strong>，它与一般的<strong>objc_autorelease</strong>函数不同，它不仅限于注册对象到autoreleasePool中。它还有一个与之配对的函数：<strong>objc_retainAutoreleasedReturnValue</strong>。这对函数主要用于极致优化程序运行，怎么个优化法呢？</p>\n<p><strong>objc_autoreleaseReturnValue</strong>函数会检查使用该函数的方法或函数调用方的执行命令列表，如果调用方在调用了该函数后紧接着调用<strong>objc_retainAutoreleasedReturnValue</strong>函数，那么久不讲返回的对象注册到autoreleasePool中，而是直接传递到函数的调用方。通过这两个函数，就可以不将对象注册到autoreleasePool中而直接传递，这一过程达到了最优化。</p>\n<p>所以，array方法返回的对象，不一定注册到了autoreleasePool中，那么看以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@autoreleasePool&#123;</div><div class=\"line\">    id __strong obj = [NSMutableArray array];</div><div class=\"line\">    _objc_autoreleasingPoolPrint();     //打印当前释放池的信息</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>猜想一下，Pool中是否有obj这一对象呢？经过试验，答案是没有，以上的优化过程可以解释为什么。</p>\n<p>前面说到，id obj其实就是id __strong obj，那么id *obj呢，也是id __strong *obj吗？答案是NO，它对应的是：id __autoreleasing *obj；像这样，id的指针或对象的指针，在没有指定修饰符的情况下，默认会加上__autoreleasing修饰符。</p>\n<p>我们经常看到一些方法，在参数里面返回error信息，方法声明如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (BOOL)performOperationWithError:(NSError **)error;</div><div class=\"line\">//等价于</div><div class=\"line\">- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error;</div></pre></td></tr></table></figure>\n<p>调用如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSError *error = nil;   //等价于NSError __strong *error</div><div class=\"line\">BOOL result = [obj performOperationWithError:&amp;error];</div></pre></td></tr></table></figure>\n<p>苹果自身很多API也是通过这样的方式返回错误信息的。</p>\n<p>但是，如果直接赋值，那么会产生编译器错误，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSError *error = nil;</div><div class=\"line\">NSError **pError = &amp;error;      //编译器会报错</div></pre></td></tr></table></figure>\n<p>这是因为，赋值给<strong>指针对象</strong>时，对象的所有权修饰符必须保持一致。因为error变量附加有__strong修饰符，而pError则附加有__autoreleasing修饰符，所以报错。可更改为：NSError  * __strong  *pError = &amp;error即可。</p>\n<p>但是，之前的函数调用，使用__strong修饰符的error变量，并没有进行转换，也没有报错呀，这是为什么呢？这是因为编译器自动进行了如下转化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSError __strong *error = nil;</div><div class=\"line\">NSError __autoreleasing *tmpError = error;</div><div class=\"line\">BOOL result = [obj performOperationWithError:&amp;error];</div></pre></td></tr></table></figure>\n<h1 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h1><p>在ARC的情况下，怎么知道对象的引用计数值呢？</p>\n<p><strong>uintptr_t  _objc_rootRetainCount(id obj);</strong></p>\n<p>该函数可以取得对象的计数值。但是，该函数是非线程安全的，且对于已释放的对象和不正确的对象类型，返回的值也是不准确的。所以该函数只提供一个参考值。</p>\n<h1 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h1><ol>\n<li><p>书籍上说，在访问附有__weak修饰符的变量时，实际上必定要访问注册到autoreleasePool中的对象，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">id obj0 = [[NSObject alloc] init];</div><div class=\"line\">id __weak obj1 = obj0;</div><div class=\"line\">NSLog(@&quot;class=%@&quot;,[obj1 class]);</div></pre></td></tr></table></figure>\n<p>上述代码和一下代码相同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">id __weak obj1 = obj0;</div><div class=\"line\">id __autoreleasing tmp = obj1;</div><div class=\"line\">NSLog(@&quot;class=%@&quot;,[tmp class]);</div></pre></td></tr></table></figure>\n<p>但实际试验结果和书上所说有所出入，如果把两段代码放入@autoreleasePool{}里面，然后打印Pool的信      息，就会发现下面的代码，池子里面包含了对象obj0，但是上面的代码则没有包含。所以访问__weak变量，实际上必定访问注册到autoreleasePool中的对象，对此持保留态度。</p>\n</li>\n<li><p>我们一般都是这样使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@autoreleasepool &#123;</div><div class=\"line\">    id obj = [[NSObject alloc] init];</div><div class=\"line\">     id mArray = [NSMutableArray array];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过上面讲述的优化过程，知道obj和mArray并不会注册到autoreleasePool中，打印Pool信息，也确实没发现这两个对象。既然没注册到Pool里面，那么外面的@autoreleasepool{}块还有用吗？</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h1><p>ARC，即Automatic Reference Counting，字面意思“自动引用计数”， ARC只是自动的帮助我们处理“引用计数”相关的部分。关于引用计数的思考方式并没有发生变化，只是在源码的表述上稍有不同，发生了什么变化呢？首先要理解ARC中追加的所有权声明。</p>\n<h1 id=\"所有权修饰符\"><a href=\"#所有权修饰符\" class=\"headerlink\" title=\"所有权修饰符\"></a>所有权修饰符</h1><p>OC中，为了处理对象，将变量定义为id类型或各种对象类型，比如id，NSObject *等。在ARC有效时，OC对象类型同C语言其它类型不同，其类型上必须附加所有权修饰符。所有权修饰符一共有四种，是：__strong，__weak，__unsafe_unretained，__autoreleasing。附有这些修饰符的变量，会自动初始化为nil。以下对每种修饰符进行简单讲解。</p>\n<h2 id=\"strong修饰符\"><a href=\"#strong修饰符\" class=\"headerlink\" title=\"__strong修饰符\"></a>__strong修饰符</h2><p>__strong修饰符表示对对象的“强引用”，持有强引用的变量在超出其作用域范围时被废弃，随着强引用的失效，其引用的对象会随之释放。（自动释放）<br>__strong修饰符是OC所有对象默认的所有权修饰符。也就是说，以下代码是等效的：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  //自己生成并持有对象</div><div class=\"line\">  id obj = [[NSObject alloc] init];</div><div class=\"line\">  //和以下代码等价的</div><div class=\"line\">  id __strong obj = [[NSObject alloc] init];</div><div class=\"line\">&#125;</div><div class=\"line\">//obj超出其作用域，强引用失效，所以自动释放obj所持有的对象。该对象的所有者不存在，因此废弃该对象</div></pre></td></tr></table></figure></p>\n<p>在ARC无效的情况下，代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* ARC无效 */</div><div class=\"line\">&#123;</div><div class=\"line\">    //自己生成并持有对象</div><div class=\"line\">    id obj = [[NSObject alloc] init];</div><div class=\"line\">    //不再需要对象时，释放</div><div class=\"line\">    [obj release];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上述代码取得的是自己生成并持有的对象，那取得非自己生成并持有的对象该怎么办呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  //自己非生成并持有对象</div><div class=\"line\">  id __strong obj = [NSMutableArray array];</div><div class=\"line\">  //因为变量obj为强引用，所以它自己持有对象</div><div class=\"line\">&#125;</div><div class=\"line\">//obj超出其作用域，强引用失效，所以自动释放obj所持有的对象。该对象的所有者不存在，因此废弃该对象</div></pre></td></tr></table></figure></p>\n<p>其实上述代码，最终会被编译器转换成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">id obj = objc_msgSend(NSMutableArray, @selector(array));</div><div class=\"line\">objc_retainAutoreleasedReturnValue(obj);</div><div class=\"line\">objc_release(obj);</div></pre></td></tr></table></figure>\n<p>可以看出，__strong修饰符可以自动持有对象，尽管对象非自己生成并持有的。<br>通过上述几段代码，可以发现，“自己生成的对象，自己持有”和“非自己生成的对象，自己也能持有”这两条只需通过对带__strong修饰符的变量赋值即可完成。而“不再需要持有的对象时自己释放”，当变量超出作用域范围（或者对变量进行重新赋值）时，会自动触发。最后一条“非自己持有的对象，自己不能释放“，由于不能调用release方法，所以这条自然也满足。</p>\n<h2 id=\"weak修饰符\"><a href=\"#weak修饰符\" class=\"headerlink\" title=\"__weak修饰符\"></a>__weak修饰符</h2><p>看起来好像通过__strong修饰符就能很好的管理内存了，但是仅有__strong是不够的，它无法解决引用计数式内存管理中无法避免的”<strong>循环引用</strong>“问题，所以才有__weak修饰符。<br>__weak与__strong相反，提供弱引用。弱引用不能持有对象实例。__weak修饰符还有一个优点，即在持有某对象的弱引用时，若该对象被废弃，则次弱引用将自动置为nil，反过来，也可以通过检查有__weak修饰符的变量是否为nil，来判断被赋值的对象是否被废弃。<br>使用__weak修饰符时需要注意，不能直接生成对象并对其赋值，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">id __weak obj = [[NSObject alloc] init];</div></pre></td></tr></table></figure></p>\n<p>[[NSObject alloc] init]属于自己生成并持有的对象，但__weak修饰符不能持有对象实例，所以生成的对象会被立即释放，编译器对此会发出警告。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  //obj0为强引用，自己生成并持有对象</div><div class=\"line\">  id __strong obj0 = [[NSObject alloc] init];</div><div class=\"line\">  //obj1持有生成对象的弱引用</div><div class=\"line\">  id __weak obj1 = obj0;</div><div class=\"line\">&#125;</div><div class=\"line\">//obj0超出作用域，强引用失效，所以自动释放它持有的对象。因为对象没有持有者了，所以废弃该对象</div></pre></td></tr></table></figure></p>\n<p>那又是如何做到__weak变量，在它弱引用的对象释放后，自动置为nil的呢？</p>\n<p>答案是系统会维持一张weak表，也是散列表，该对象作为建，弱引用它的weak变量为值，如果有多个弱引用的话，则会形成类似链表的结构，所以当该对象自动释放时，会遍历这个weak表，找出它对应的弱引用，然后将它们置为nil，并删除相应的键值记录。由此可知，如果大量使用附有__weak修饰符的变量，会消耗相应的CPU资源。</p>\n<h2 id=\"unsafe-unretained修饰符\"><a href=\"#unsafe-unretained修饰符\" class=\"headerlink\" title=\"__unsafe_unretained修饰符\"></a>__unsafe_unretained修饰符</h2><p>正如其名unsafe所言，是不安全的所有权修饰符。尽管ARC式的内存管理是编译器的工作，但附有__unsafe_unretained修饰符的变量不属于编译器的内存管理对象。它的作用和__weak修饰符变量类似，但它并不持有对象的强引用或弱引用，而且它表示的对象一旦被废弃，它并不会被置为nil，而是变成野指针，所以尽量不要使用__unsafe_unretained。</p>\n<h2 id=\"autoreleasing修饰符\"><a href=\"#autoreleasing修饰符\" class=\"headerlink\" title=\"__autoreleasing修饰符\"></a>__autoreleasing修饰符</h2><p>无论ARC是否有效，都可使用非公开函数<strong>_objc_autoreleasingPoolPrint()</strong>来打印Pool信息。</p>\n<p>先看一下，在非ARC的情况下，怎么使用autorelease的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];</div><div class=\"line\">id obj = [[NSObject alloc] init];</div><div class=\"line\">[obj autorelease];</div><div class=\"line\">[pool drain];</div></pre></td></tr></table></figure>\n<p>NSAutoreleasePool对象的生命周期，相当于变量作用域。对该周期内，所有调用过autorelease方法的对象，在pool被废弃时，会自动向它发送release消息。<br>在ARC情况下，代码可改写如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@autoreleasepool &#123;</div><div class=\"line\">    id __autoreleasing obj = [[NSObject alloc] init];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>@autoreleasepool{}来代替NSAutoreleasePool类对象的生成、持有以及废弃这一范围。通过给变量附加__autoreleasing修饰符，来代替向变量发送autorelease消息，即对象被注册到autoreleasepool中。<br>上一篇博文说道，如何获取非自己生成并持有的对象，主要就是通过在非alloc、new、copy、mutableCopy等方法返回的对象上调用autorelease方法。那在ARC的情况下又是怎么样的呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (id)array</div><div class=\"line\">&#123;</div><div class=\"line\">    return [[NSMutableArray alloc] init];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是这段代码，经过编译器的转换之后，将变成：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">+ (id)array</div><div class=\"line\">&#123;</div><div class=\"line\">    id obj = objc_msgSend(NSMutableArray, @selector(alloc));</div><div class=\"line\">    objc_msgSend(obj, @selector(init));</div><div class=\"line\">    return objc_autoreleaseReturnValue(obj);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>转换的最后，调用了一个函数：<strong>objc_autoreleaseReturnValue</strong>，它与一般的<strong>objc_autorelease</strong>函数不同，它不仅限于注册对象到autoreleasePool中。它还有一个与之配对的函数：<strong>objc_retainAutoreleasedReturnValue</strong>。这对函数主要用于极致优化程序运行，怎么个优化法呢？</p>\n<p><strong>objc_autoreleaseReturnValue</strong>函数会检查使用该函数的方法或函数调用方的执行命令列表，如果调用方在调用了该函数后紧接着调用<strong>objc_retainAutoreleasedReturnValue</strong>函数，那么久不讲返回的对象注册到autoreleasePool中，而是直接传递到函数的调用方。通过这两个函数，就可以不将对象注册到autoreleasePool中而直接传递，这一过程达到了最优化。</p>\n<p>所以，array方法返回的对象，不一定注册到了autoreleasePool中，那么看以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@autoreleasePool&#123;</div><div class=\"line\">    id __strong obj = [NSMutableArray array];</div><div class=\"line\">    _objc_autoreleasingPoolPrint();     //打印当前释放池的信息</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>猜想一下，Pool中是否有obj这一对象呢？经过试验，答案是没有，以上的优化过程可以解释为什么。</p>\n<p>前面说到，id obj其实就是id __strong obj，那么id *obj呢，也是id __strong *obj吗？答案是NO，它对应的是：id __autoreleasing *obj；像这样，id的指针或对象的指针，在没有指定修饰符的情况下，默认会加上__autoreleasing修饰符。</p>\n<p>我们经常看到一些方法，在参数里面返回error信息，方法声明如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (BOOL)performOperationWithError:(NSError **)error;</div><div class=\"line\">//等价于</div><div class=\"line\">- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error;</div></pre></td></tr></table></figure>\n<p>调用如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSError *error = nil;   //等价于NSError __strong *error</div><div class=\"line\">BOOL result = [obj performOperationWithError:&amp;error];</div></pre></td></tr></table></figure>\n<p>苹果自身很多API也是通过这样的方式返回错误信息的。</p>\n<p>但是，如果直接赋值，那么会产生编译器错误，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSError *error = nil;</div><div class=\"line\">NSError **pError = &amp;error;      //编译器会报错</div></pre></td></tr></table></figure>\n<p>这是因为，赋值给<strong>指针对象</strong>时，对象的所有权修饰符必须保持一致。因为error变量附加有__strong修饰符，而pError则附加有__autoreleasing修饰符，所以报错。可更改为：NSError  * __strong  *pError = &amp;error即可。</p>\n<p>但是，之前的函数调用，使用__strong修饰符的error变量，并没有进行转换，也没有报错呀，这是为什么呢？这是因为编译器自动进行了如下转化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSError __strong *error = nil;</div><div class=\"line\">NSError __autoreleasing *tmpError = error;</div><div class=\"line\">BOOL result = [obj performOperationWithError:&amp;error];</div></pre></td></tr></table></figure>\n<h1 id=\"引用计数\"><a href=\"#引用计数\" class=\"headerlink\" title=\"引用计数\"></a>引用计数</h1><p>在ARC的情况下，怎么知道对象的引用计数值呢？</p>\n<p><strong>uintptr_t  _objc_rootRetainCount(id obj);</strong></p>\n<p>该函数可以取得对象的计数值。但是，该函数是非线程安全的，且对于已释放的对象和不正确的对象类型，返回的值也是不准确的。所以该函数只提供一个参考值。</p>\n<h1 id=\"疑惑\"><a href=\"#疑惑\" class=\"headerlink\" title=\"疑惑\"></a>疑惑</h1><ol>\n<li><p>书籍上说，在访问附有__weak修饰符的变量时，实际上必定要访问注册到autoreleasePool中的对象，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">id obj0 = [[NSObject alloc] init];</div><div class=\"line\">id __weak obj1 = obj0;</div><div class=\"line\">NSLog(@&quot;class=%@&quot;,[obj1 class]);</div></pre></td></tr></table></figure>\n<p>上述代码和一下代码相同：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">id __weak obj1 = obj0;</div><div class=\"line\">id __autoreleasing tmp = obj1;</div><div class=\"line\">NSLog(@&quot;class=%@&quot;,[tmp class]);</div></pre></td></tr></table></figure>\n<p>但实际试验结果和书上所说有所出入，如果把两段代码放入@autoreleasePool{}里面，然后打印Pool的信      息，就会发现下面的代码，池子里面包含了对象obj0，但是上面的代码则没有包含。所以访问__weak变量，实际上必定访问注册到autoreleasePool中的对象，对此持保留态度。</p>\n</li>\n<li><p>我们一般都是这样使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">@autoreleasepool &#123;</div><div class=\"line\">    id obj = [[NSObject alloc] init];</div><div class=\"line\">     id mArray = [NSMutableArray array];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过上面讲述的优化过程，知道obj和mArray并不会注册到autoreleasePool中，打印Pool信息，也确实没发现这两个对象。既然没注册到Pool里面，那么外面的@autoreleasepool{}块还有用吗？</p>\n</li>\n</ol>\n"},{"title":"图片拉伸问题","date":"2017-08-01T02:36:58.000Z","_content":"\n苹果给了3个图片拉伸相关的api，分别是：\n\n```objective-c\n- (UIImage *)stretchableImageWithLeftCapWidth:(NSInteger)leftCapWidth           \n                                 topCapHeight:(NSInteger)topCapHeight;\n- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets;\n- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets \n                            resizingMode:(UIImageResizingMode)resizingMode\n```\n\n关于这三个方法的含义，拉伸区域等的解释以及用法，请看这篇博客：[iOS图片拉伸技巧][1]，这里不做过多赘述。\n\n下面说下自己遇到的问题：原始图片如下\n\n![][image-1]\n\nUI给的原始图片大小为（138，48），所以理论上UIImageView的大小为：（69，24）即可。现在需要将imageView拉伸到（126，24）以免图片变形，拉伸代码如下：\n\n```objective-c\nUIImage *image = self.bubbleView.image;\nCGSize imageSize = image.size;\nimage = [image stretchableImageWithLeftCapWidth:floorf(imageSize.width*2/3)            \n                                   topCapHeight:floorf(imageSize.height/3)];\nself.bubbleView.image = image;\n```\n\n当image是从xcassets里面读取的，即：\n\n```objective-c\nself.bubbleView.image = [UIImage imageNamed:@\"xxx\"];\n```\n\n然后进行拉伸，是没有任何问题，图片也没有变形。\n但是当image是从沙盒，或者网络下载的，拉伸之后图片就发生变形。\n```objective-c\nNSString *imagePath = [[NSBundle mainBundle] pathForResource:imageName \n                                                      ofType:@\"png\"];\nself.bubbleView.image = [UIImage imageWithContentsOfFile:imagePath];\n```\n为什么呢？事实上，对于从xcassets加载的图片，即使不需要上述的拉伸代码，图片也能正确拉伸，没有变形，这么神奇？？这是因为从xcode5开始，对于xcassets里面的图片增加了一个新特性：**slicing**。\n\n它会指定可拉伸区域，当用户指定后，对应的json文件也发生变化：\n\n```json\n{\n      \"resizing\" : {\n        \"mode\" : \"3-part-horizontal\",\n        \"center\" : {\n          \"mode\" : \"tile\",\n          \"width\" : 1\n        },\n        \"cap-insets\" : {\n          \"right\" : 41,\n          \"left\" : 20\n        }\n      },\n      \"idiom\" : \"universal\",\n      \"filename\" : \"live_barrage_pop02_bg@2x.png\",\n      \"scale\" : \"2x\"\n}\n```\n\n可以发现，json里面指定了**cap-insets**，这就是拉伸api里面需要的参数。所以slicing，其实就是一个可视化的图片拉伸工具。另外，通过imageNamed:方法读出的图片，其大小也不再是原始大小，可以自行试验。\n\n**回到正题，为什么沙盒里的图片，拉伸之后却变形了呢？**\n\n这是因为，沙盒里读出的图片，其scale为1.0，其大小是（138，48），将这个图片按照指定的位置进行拉伸，放入（126，24） 的视图里，发生了变形。而xcassets里面的，是将图片（69，24）按照指定的位置进行拉伸的。解决方案是，**先将沙盒的图片进行缩放到2x的大小，然后进行拉伸**，代码如下：\n\n```objective-c\nUIImage *image = self.bubbleView.image;    \nCGSize imageSize = image.size;    \nif (F_EQUAL(image.scale, 1.0)){    \n  //scale为1的时候，对图片进行等比例缩放；\n  imageSize = CGSizeMake(imageSize.width/2, imageSize.height/2);    \n  UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0.0);  \n  [image drawInRect:CGRectMake(0, 0, imageSize.width, imageSize.height)];  \n  UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();  \n  UIGraphicsEndImageContext();\n  image = newImage; \n}\nimage = [image stretchableImageWithLeftCapWidth:floorf(imageSize.width*2/3) topCapHeight:floorf(imageSize.height/3)]; \nself.bubbleView.image = image;\n```\n\n[1]:\thttp://blog.csdn.net/q199109106q/article/details/8615661\n\n[image-1]:\thttp://i1.ciimg.com/1949/69c4a516ff4a6a47.png","source":"_posts/图片拉伸问题.md","raw":"---\ntitle: 图片拉伸问题\ndate: 2017-08-01 10:36:58\ntags:\n---\n\n苹果给了3个图片拉伸相关的api，分别是：\n\n```objective-c\n- (UIImage *)stretchableImageWithLeftCapWidth:(NSInteger)leftCapWidth           \n                                 topCapHeight:(NSInteger)topCapHeight;\n- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets;\n- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets \n                            resizingMode:(UIImageResizingMode)resizingMode\n```\n\n关于这三个方法的含义，拉伸区域等的解释以及用法，请看这篇博客：[iOS图片拉伸技巧][1]，这里不做过多赘述。\n\n下面说下自己遇到的问题：原始图片如下\n\n![][image-1]\n\nUI给的原始图片大小为（138，48），所以理论上UIImageView的大小为：（69，24）即可。现在需要将imageView拉伸到（126，24）以免图片变形，拉伸代码如下：\n\n```objective-c\nUIImage *image = self.bubbleView.image;\nCGSize imageSize = image.size;\nimage = [image stretchableImageWithLeftCapWidth:floorf(imageSize.width*2/3)            \n                                   topCapHeight:floorf(imageSize.height/3)];\nself.bubbleView.image = image;\n```\n\n当image是从xcassets里面读取的，即：\n\n```objective-c\nself.bubbleView.image = [UIImage imageNamed:@\"xxx\"];\n```\n\n然后进行拉伸，是没有任何问题，图片也没有变形。\n但是当image是从沙盒，或者网络下载的，拉伸之后图片就发生变形。\n```objective-c\nNSString *imagePath = [[NSBundle mainBundle] pathForResource:imageName \n                                                      ofType:@\"png\"];\nself.bubbleView.image = [UIImage imageWithContentsOfFile:imagePath];\n```\n为什么呢？事实上，对于从xcassets加载的图片，即使不需要上述的拉伸代码，图片也能正确拉伸，没有变形，这么神奇？？这是因为从xcode5开始，对于xcassets里面的图片增加了一个新特性：**slicing**。\n\n它会指定可拉伸区域，当用户指定后，对应的json文件也发生变化：\n\n```json\n{\n      \"resizing\" : {\n        \"mode\" : \"3-part-horizontal\",\n        \"center\" : {\n          \"mode\" : \"tile\",\n          \"width\" : 1\n        },\n        \"cap-insets\" : {\n          \"right\" : 41,\n          \"left\" : 20\n        }\n      },\n      \"idiom\" : \"universal\",\n      \"filename\" : \"live_barrage_pop02_bg@2x.png\",\n      \"scale\" : \"2x\"\n}\n```\n\n可以发现，json里面指定了**cap-insets**，这就是拉伸api里面需要的参数。所以slicing，其实就是一个可视化的图片拉伸工具。另外，通过imageNamed:方法读出的图片，其大小也不再是原始大小，可以自行试验。\n\n**回到正题，为什么沙盒里的图片，拉伸之后却变形了呢？**\n\n这是因为，沙盒里读出的图片，其scale为1.0，其大小是（138，48），将这个图片按照指定的位置进行拉伸，放入（126，24） 的视图里，发生了变形。而xcassets里面的，是将图片（69，24）按照指定的位置进行拉伸的。解决方案是，**先将沙盒的图片进行缩放到2x的大小，然后进行拉伸**，代码如下：\n\n```objective-c\nUIImage *image = self.bubbleView.image;    \nCGSize imageSize = image.size;    \nif (F_EQUAL(image.scale, 1.0)){    \n  //scale为1的时候，对图片进行等比例缩放；\n  imageSize = CGSizeMake(imageSize.width/2, imageSize.height/2);    \n  UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0.0);  \n  [image drawInRect:CGRectMake(0, 0, imageSize.width, imageSize.height)];  \n  UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();  \n  UIGraphicsEndImageContext();\n  image = newImage; \n}\nimage = [image stretchableImageWithLeftCapWidth:floorf(imageSize.width*2/3) topCapHeight:floorf(imageSize.height/3)]; \nself.bubbleView.image = image;\n```\n\n[1]:\thttp://blog.csdn.net/q199109106q/article/details/8615661\n\n[image-1]:\thttp://i1.ciimg.com/1949/69c4a516ff4a6a47.png","slug":"图片拉伸问题","published":1,"updated":"2018-01-23T02:45:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjfxt7obd0006px91cccclt68","content":"<p>苹果给了3个图片拉伸相关的api，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (UIImage *)stretchableImageWithLeftCapWidth:(NSInteger)leftCapWidth           </div><div class=\"line\">                                 topCapHeight:(NSInteger)topCapHeight;</div><div class=\"line\">- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets;</div><div class=\"line\">- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets </div><div class=\"line\">                            resizingMode:(UIImageResizingMode)resizingMode</div></pre></td></tr></table></figure>\n<p>关于这三个方法的含义，拉伸区域等的解释以及用法，请看这篇博客：<a href=\"http://blog.csdn.net/q199109106q/article/details/8615661\" target=\"_blank\" rel=\"external\">iOS图片拉伸技巧</a>，这里不做过多赘述。</p>\n<p>下面说下自己遇到的问题：原始图片如下</p>\n<p><img src=\"http://i1.ciimg.com/1949/69c4a516ff4a6a47.png\" alt=\"\"></p>\n<p>UI给的原始图片大小为（138，48），所以理论上UIImageView的大小为：（69，24）即可。现在需要将imageView拉伸到（126，24）以免图片变形，拉伸代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIImage *image = self.bubbleView.image;</div><div class=\"line\">CGSize imageSize = image.size;</div><div class=\"line\">image = [image stretchableImageWithLeftCapWidth:floorf(imageSize.width*2/3)            </div><div class=\"line\">                                   topCapHeight:floorf(imageSize.height/3)];</div><div class=\"line\">self.bubbleView.image = image;</div></pre></td></tr></table></figure>\n<p>当image是从xcassets里面读取的，即：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.bubbleView.image = [UIImage imageNamed:@&quot;xxx&quot;];</div></pre></td></tr></table></figure>\n<p>然后进行拉伸，是没有任何问题，图片也没有变形。<br>但是当image是从沙盒，或者网络下载的，拉伸之后图片就发生变形。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *imagePath = [[NSBundle mainBundle] pathForResource:imageName </div><div class=\"line\">                                                      ofType:@&quot;png&quot;];</div><div class=\"line\">self.bubbleView.image = [UIImage imageWithContentsOfFile:imagePath];</div></pre></td></tr></table></figure></p>\n<p>为什么呢？事实上，对于从xcassets加载的图片，即使不需要上述的拉伸代码，图片也能正确拉伸，没有变形，这么神奇？？这是因为从xcode5开始，对于xcassets里面的图片增加了一个新特性：<strong>slicing</strong>。</p>\n<p>它会指定可拉伸区域，当用户指定后，对应的json文件也发生变化：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"attr\">\"resizing\"</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">\"mode\"</span> : <span class=\"string\">\"3-part-horizontal\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"center\"</span> : &#123;</div><div class=\"line\">          <span class=\"attr\">\"mode\"</span> : <span class=\"string\">\"tile\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"width\"</span> : <span class=\"number\">1</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">\"cap-insets\"</span> : &#123;</div><div class=\"line\">          <span class=\"attr\">\"right\"</span> : <span class=\"number\">41</span>,</div><div class=\"line\">          <span class=\"attr\">\"left\"</span> : <span class=\"number\">20</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">\"idiom\"</span> : <span class=\"string\">\"universal\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"filename\"</span> : <span class=\"string\">\"live_barrage_pop02_bg@2x.png\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"scale\"</span> : <span class=\"string\">\"2x\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以发现，json里面指定了<strong>cap-insets</strong>，这就是拉伸api里面需要的参数。所以slicing，其实就是一个可视化的图片拉伸工具。另外，通过imageNamed:方法读出的图片，其大小也不再是原始大小，可以自行试验。</p>\n<p><strong>回到正题，为什么沙盒里的图片，拉伸之后却变形了呢？</strong></p>\n<p>这是因为，沙盒里读出的图片，其scale为1.0，其大小是（138，48），将这个图片按照指定的位置进行拉伸，放入（126，24） 的视图里，发生了变形。而xcassets里面的，是将图片（69，24）按照指定的位置进行拉伸的。解决方案是，<strong>先将沙盒的图片进行缩放到2x的大小，然后进行拉伸</strong>，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIImage *image = self.bubbleView.image;    </div><div class=\"line\">CGSize imageSize = image.size;    </div><div class=\"line\">if (F_EQUAL(image.scale, 1.0))&#123;    </div><div class=\"line\">  //scale为1的时候，对图片进行等比例缩放；</div><div class=\"line\">  imageSize = CGSizeMake(imageSize.width/2, imageSize.height/2);    </div><div class=\"line\">  UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0.0);  </div><div class=\"line\">  [image drawInRect:CGRectMake(0, 0, imageSize.width, imageSize.height)];  </div><div class=\"line\">  UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();  </div><div class=\"line\">  UIGraphicsEndImageContext();</div><div class=\"line\">  image = newImage; </div><div class=\"line\">&#125;</div><div class=\"line\">image = [image stretchableImageWithLeftCapWidth:floorf(imageSize.width*2/3) topCapHeight:floorf(imageSize.height/3)]; </div><div class=\"line\">self.bubbleView.image = image;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>苹果给了3个图片拉伸相关的api，分别是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">- (UIImage *)stretchableImageWithLeftCapWidth:(NSInteger)leftCapWidth           </div><div class=\"line\">                                 topCapHeight:(NSInteger)topCapHeight;</div><div class=\"line\">- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets;</div><div class=\"line\">- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets </div><div class=\"line\">                            resizingMode:(UIImageResizingMode)resizingMode</div></pre></td></tr></table></figure>\n<p>关于这三个方法的含义，拉伸区域等的解释以及用法，请看这篇博客：<a href=\"http://blog.csdn.net/q199109106q/article/details/8615661\" target=\"_blank\" rel=\"external\">iOS图片拉伸技巧</a>，这里不做过多赘述。</p>\n<p>下面说下自己遇到的问题：原始图片如下</p>\n<p><img src=\"http://i1.ciimg.com/1949/69c4a516ff4a6a47.png\" alt=\"\"></p>\n<p>UI给的原始图片大小为（138，48），所以理论上UIImageView的大小为：（69，24）即可。现在需要将imageView拉伸到（126，24）以免图片变形，拉伸代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIImage *image = self.bubbleView.image;</div><div class=\"line\">CGSize imageSize = image.size;</div><div class=\"line\">image = [image stretchableImageWithLeftCapWidth:floorf(imageSize.width*2/3)            </div><div class=\"line\">                                   topCapHeight:floorf(imageSize.height/3)];</div><div class=\"line\">self.bubbleView.image = image;</div></pre></td></tr></table></figure>\n<p>当image是从xcassets里面读取的，即：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">self.bubbleView.image = [UIImage imageNamed:@&quot;xxx&quot;];</div></pre></td></tr></table></figure>\n<p>然后进行拉伸，是没有任何问题，图片也没有变形。<br>但是当image是从沙盒，或者网络下载的，拉伸之后图片就发生变形。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NSString *imagePath = [[NSBundle mainBundle] pathForResource:imageName </div><div class=\"line\">                                                      ofType:@&quot;png&quot;];</div><div class=\"line\">self.bubbleView.image = [UIImage imageWithContentsOfFile:imagePath];</div></pre></td></tr></table></figure></p>\n<p>为什么呢？事实上，对于从xcassets加载的图片，即使不需要上述的拉伸代码，图片也能正确拉伸，没有变形，这么神奇？？这是因为从xcode5开始，对于xcassets里面的图片增加了一个新特性：<strong>slicing</strong>。</p>\n<p>它会指定可拉伸区域，当用户指定后，对应的json文件也发生变化：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">      <span class=\"attr\">\"resizing\"</span> : &#123;</div><div class=\"line\">        <span class=\"attr\">\"mode\"</span> : <span class=\"string\">\"3-part-horizontal\"</span>,</div><div class=\"line\">        <span class=\"attr\">\"center\"</span> : &#123;</div><div class=\"line\">          <span class=\"attr\">\"mode\"</span> : <span class=\"string\">\"tile\"</span>,</div><div class=\"line\">          <span class=\"attr\">\"width\"</span> : <span class=\"number\">1</span></div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">\"cap-insets\"</span> : &#123;</div><div class=\"line\">          <span class=\"attr\">\"right\"</span> : <span class=\"number\">41</span>,</div><div class=\"line\">          <span class=\"attr\">\"left\"</span> : <span class=\"number\">20</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">\"idiom\"</span> : <span class=\"string\">\"universal\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"filename\"</span> : <span class=\"string\">\"live_barrage_pop02_bg@2x.png\"</span>,</div><div class=\"line\">      <span class=\"attr\">\"scale\"</span> : <span class=\"string\">\"2x\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可以发现，json里面指定了<strong>cap-insets</strong>，这就是拉伸api里面需要的参数。所以slicing，其实就是一个可视化的图片拉伸工具。另外，通过imageNamed:方法读出的图片，其大小也不再是原始大小，可以自行试验。</p>\n<p><strong>回到正题，为什么沙盒里的图片，拉伸之后却变形了呢？</strong></p>\n<p>这是因为，沙盒里读出的图片，其scale为1.0，其大小是（138，48），将这个图片按照指定的位置进行拉伸，放入（126，24） 的视图里，发生了变形。而xcassets里面的，是将图片（69，24）按照指定的位置进行拉伸的。解决方案是，<strong>先将沙盒的图片进行缩放到2x的大小，然后进行拉伸</strong>，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">UIImage *image = self.bubbleView.image;    </div><div class=\"line\">CGSize imageSize = image.size;    </div><div class=\"line\">if (F_EQUAL(image.scale, 1.0))&#123;    </div><div class=\"line\">  //scale为1的时候，对图片进行等比例缩放；</div><div class=\"line\">  imageSize = CGSizeMake(imageSize.width/2, imageSize.height/2);    </div><div class=\"line\">  UIGraphicsBeginImageContextWithOptions(imageSize, NO, 0.0);  </div><div class=\"line\">  [image drawInRect:CGRectMake(0, 0, imageSize.width, imageSize.height)];  </div><div class=\"line\">  UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();  </div><div class=\"line\">  UIGraphicsEndImageContext();</div><div class=\"line\">  image = newImage; </div><div class=\"line\">&#125;</div><div class=\"line\">image = [image stretchableImageWithLeftCapWidth:floorf(imageSize.width*2/3) topCapHeight:floorf(imageSize.height/3)]; </div><div class=\"line\">self.bubbleView.image = image;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}